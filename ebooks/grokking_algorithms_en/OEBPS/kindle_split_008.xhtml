<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />
<style type="text/css" title="ibis-book">
    #sbo-rt-content .calibre{display:block;font-size:1em;margin-bottom:0;margin-left:5pt;margin-right:5pt;margin-top:0;padding-left:0;padding-right:0}#sbo-rt-content .calibre1{display:block;font-size:2em;font-weight:bold;line-height:1.2;margin-bottom:.67em;margin-left:0;margin-right:0;margin-top:.67em;text-align:center}#sbo-rt-content .calibre10{display:table-row-group;vertical-align:middle}#sbo-rt-content .calibre11{display:table-row;vertical-align:inherit}#sbo-rt-content .calibre12{display:block;font-family:"Liberation Mono",monospace;font-size:.77778em;margin-bottom:1em;margin-left:5px;margin-right:0;margin-top:1em;white-space:pre-wrap}#sbo-rt-content .calibre13{display:block;font-size:1.125em;font-weight:bold;line-height:1.2;margin-bottom:0;margin-left:0;margin-right:0;margin-top:40px}#sbo-rt-content .calibre14{display:block}#sbo-rt-content .calibre15{display:block;margin-bottom:1em;margin-left:1em;margin-right:1em;margin-top:1em}#sbo-rt-content .calibre16{display:block}#sbo-rt-content .calibre17{display:block;margin-bottom:1em;margin-left:0;margin-right:0;margin-top:1em}#sbo-rt-content .calibre18{display:block;list-style-type:disc;margin-bottom:1em;margin-right:0;margin-top:1em}#sbo-rt-content .calibre19{display:list-item}#sbo-rt-content .calibre2{height:auto;width:auto}#sbo-rt-content .calibre20{font-weight:bold}#sbo-rt-content .calibre21{font-family:"Liberation Mono",monospace}#sbo-rt-content .calibre22{display:block;font-weight:bold;margin-bottom:0;margin-left:0;margin-right:0;margin-top:30px}#sbo-rt-content .calibre23{display:table-column-group}#sbo-rt-content .calibre24{display:table-cell;padding-bottom:1px;padding-left:1px;padding-right:1px;padding-top:1px;text-align:inherit;vertical-align:inherit}#sbo-rt-content .calibre25{font-size:.75em;line-height:normal;vertical-align:sub}#sbo-rt-content .calibre26{font-size:.75em;line-height:normal;vertical-align:super}#sbo-rt-content .calibre27{display:block;list-style-type:decimal;margin-bottom:1em;margin-right:0;margin-top:1em}#sbo-rt-content .calibre28{font-size:smaller;line-height:normal;vertical-align:super}#sbo-rt-content .calibre29{font-size:.75em}#sbo-rt-content .calibre3{font-family:"Times";line-height:1.2}#sbo-rt-content .calibre30{font-size:.77778em;line-height:normal;vertical-align:super}#sbo-rt-content .calibre31{font-size:.71429em}#sbo-rt-content .calibre4{font-family:"Times"}#sbo-rt-content .calibre5{display:block;font-family:"Liberation Mono",monospace;font-size:.75em;margin-bottom:1em;margin-left:5px;margin-right:0;margin-top:1em;white-space:pre-wrap}#sbo-rt-content .calibre6{font-style:italic}#sbo-rt-content .calibre7{border-collapse:separate;border-spacing:2px;display:table;margin-bottom:0;margin-top:0;text-indent:0}#sbo-rt-content .calibre8{display:table-column-group;text-align:left}#sbo-rt-content .calibre9{display:table-column}#sbo-rt-content .center{display:block;font-weight:bold;margin-bottom:0;margin-left:0;margin-right:0;margin-top:30px;text-align:center}#sbo-rt-content .center1{display:block;margin-bottom:1em;margin-left:0;margin-right:0;margin-top:1em;text-align:center}#sbo-rt-content .docTableCell{display:table-cell;font-size:.75em;padding-bottom:1px;padding-left:1px;padding-right:1px;padding-top:1px;text-align:left;vertical-align:inherit}#sbo-rt-content .ind{display:block;margin-bottom:8px;margin-right:0;margin-top:0;text-align:left;text-indent:0}#sbo-rt-content .noind{display:block;margin-bottom:1em;margin-left:0;margin-right:0;margin-top:25px;text-indent:0}#sbo-rt-content .noindclose{display:block;margin-bottom:1em;margin-left:0;margin-right:0;margin-top:1em;text-indent:0}#sbo-rt-content .notetitle{display:block;font-size:.75em;font-weight:bold;margin-bottom:0;margin-left:0;margin-right:0;margin-top:2px}#sbo-rt-content .part{display:block;font-size:1.41667em;font-weight:bold;line-height:1.2;margin-bottom:0;margin-left:0;margin-right:0;margin-top:.83em}#sbo-rt-content .smaller{display:block;font-size:.75em;margin-bottom:1em;margin-left:1em;margin-right:1em;margin-top:1em}#sbo-rt-content .toc{display:block;margin-bottom:1em;margin-left:15px;margin-right:1em;margin-top:15px;text-indent:0}
    </style>
<style type="text/css" title="ibis-book">
    @page{margin-bottom:5pt;margin-top:5pt}
    </style>
<style type="text/css" id="font-styles">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }</style>
<style type="text/css" id="font-family">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }</style>
<style type="text/css" id="column-width">#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }</style>

<style type="text/css">body{margin:1em;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}body{background-color:transparent!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content" class="calibre"><h2 id="ch02" class="part">Chapter 2. <a id="ch02__title" class="calibre3"/>Selection Sort
      </h2>
      
      
      
      <p class="center1"><img src="Images/common.jpg" alt="" class="calibre2" width="134" height="148"/></p>
      
      
      <p class="noind"><b class="calibre20">In this chapter</b></p>
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19">You learn about arrays and linked lists—two of the most basic data structures. They’re used absolutely everywhere. You already
            used arrays in <a href="kindle_split_007.xhtml#ch01" class="calibre4">chapter 1</a>, and you’ll use them in almost every chapter in this book. Arrays are a crucial topic, so pay attention! But sometimes it’s
            better to use a linked list instead of an array. This chapter explains the pros and cons of both so you can decide which one
            is right for your algorithm.
            
         </li>
         
         <li class="calibre19">You learn your first sorting algorithm. A lot of algorithms only work if your data is sorted. Remember binary search? You
            can run binary search only on a sorted list of elements. This chapter teaches you selection sort. Most languages have a sorting
            algorithm built in, so you’ll rarely need to write your own version from scratch. But selection sort is a stepping stone to
            quicksort, which I’ll cover in the next chapter. Quicksort is an important algorithm, and it will be easier to understand
            if you know one sorting algorithm already.
            
         </li>
         
      </ul>
      
      
      <p class="noind"/>
      <table width="100%" border="1" cellspacing="5" class="calibre7">
         <colgroup class="calibre23">
            <col width="550" class="calibre9"/>
         </colgroup>
         <tbody class="calibre10">
            <tr class="calibre11">
               <td class="calibre24"/>
            </tr>
         </tbody>
      </table>
      <div class="calibre14">
         
         <b id="ch02sb01" class="calibre20">What you need to know</b>
         
         <p class="noind"><a id="iddle1263" class="calibre4"/>To understand the performance analysis bits in this chapter, you need to know Big O notation and logarithms. If you don’t
            know those, I suggest you go back and read <a href="kindle_split_007.xhtml#ch01" class="calibre4">chapter 1</a>. Big O notation will be used throughout the rest of the book.
         </p>
         
      </div>
      <table width="100%" border="1" cellspacing="5" class="calibre7">
         <colgroup class="calibre23">
            <col width="550" class="calibre9"/>
         </colgroup>
         <tbody class="calibre10">
            <tr class="calibre11">
               <td class="calibre24"/>
            </tr>
         </tbody>
      </table>
      
      
      <h3 id="ch02lev1sec1" class="calibre13"><a id="ch02lev1sec1__title" class="calibre3"/>How memory works
      </h3>
      
      <p class="noind">Imagine you go to a show and need to check your things. A chest of drawers is available.</p>
      
      
      
      <p class="center1"><img src="Images/022fig01.jpg" alt="" class="calibre2" width="265" height="315"/></p>
      
      
      <p class="noind">Each drawer can hold one element. You want to store two things, so you ask for two drawers.</p>
      
      
      
      <p class="center1"><img src="Images/022fig02.jpg" alt="" class="calibre2" width="500" height="307"/></p>
      
      
      <p class="noind">You store your two things here.</p>
      
      
      
      <p class="center1"><img src="Images/023fig01.jpg" alt="" class="calibre2" width="444" height="355"/></p>
      
      
      <p class="noind">And you’re ready for the show! This is basically how your computer’s memory works. Your computer looks like a giant set of
         drawers, and each drawer has an address.
      </p>
      
      
      
      <p class="center1"><img src="Images/023fig02.jpg" alt="" class="calibre2" width="397" height="275"/></p>
      
      
      <p class="noind">fe Øffeeb is the address of a slot in memory.</p>
      
      <p class="noind">Each time you want to store an item in memory, you ask the computer for some space, and it gives you an address where you
         can store your item. If you want to store multiple items, there are two basic ways to do so: arrays and lists. I’ll talk about
         arrays and lists next, as well as the pros and cons of each. There isn’t one right way to store items for every use case,
         so it’s important to know the differences.
      </p>
      
      
      
      
      <h3 id="ch02lev1sec2" class="calibre13"><a id="ch02lev1sec2__title" class="calibre3"/>Arrays and linked lists
      </h3>
      
      <p class="noind">Sometimes you need to store a list of elements in memory. Suppose you’re writing an app to manage your todos. You’ll want
         to store the todos as a list in memory.
      </p>
      
      
      
      <p class="center1"><img src="Images/024fig01.jpg" alt="" class="calibre2" width="178" height="198"/></p>
      
      
      <p class="noind">Should you use an array, or a linked list? Let’s store the todos in an array first, because it’s easier to grasp. Using an
         array means all your tasks are stored contiguously (right next to each other) in memory.
      </p>
      
      
      
      <p class="center1"><img src="Images/024fig02.jpg" alt="" class="calibre2" width="500" height="306"/></p>
      
      
      <p class="noind">Now suppose you want to add a fourth task. But the next drawer is taken up by someone else’s stuff!</p>
      
      
      
      <p class="center1"><img src="Images/024fig03.jpg" alt="" class="calibre2" width="365" height="216"/></p>
      
      
      <p class="noind">It’s like going to a movie with your friends and finding a place to sit—but another friend joins you, and there’s no place
         for them. You have to move to a new spot where you all fit. In this case, you need to ask your computer for a different chunk
         of memory that can fit four tasks. Then you need to move all your tasks there.
      </p>
      
      <p class="noind"><a id="iddle1245" class="calibre4"/><a id="iddle1250" class="calibre4"/>If another friend comes by, you’re out of room again—and you all have to move a second time! What a pain. Similarly, adding
         new items to an array can be a big pain. If you’re out of space and need to move to a new spot in memory every time, adding
         a new item will be really slow. One easy fix is to “hold seats”: even if you have only 3 items in your task list, you can
         ask the computer for 10 slots, just in case. Then you can add 10 items to your task list without having to move. This is a
         good workaround, but you should be aware of a couple of downsides:
      </p>
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19">You may not need the extra slots that you asked for, and then that memory will be wasted. You aren’t using it, but no one
            else can use it either.
            
         </li>
         
         <li class="calibre19">You may add more than 10 items to your task list and have to move anyway.
            
         </li>
         
      </ul>
      
      <p class="noind">So it’s a good workaround, but it’s not a perfect solution. Linked lists solve this problem of adding items.</p>
      
      
      <h4 id="ch02lev2sec1" class="calibre22"><a id="ch02lev2sec1__title" class="calibre4"/>Linked lists
      </h4>
      
      <p class="noind">With linked lists, your items can be anywhere in memory.</p>
      
      
      
      <p class="center1"><img src="Images/025fig01.jpg" alt="" class="calibre2" width="460" height="321"/></p>
      
      
      <p class="noind">Each item stores the address of the next item in the list. A bunch of random memory addresses are linked together.</p>
      
      
      
      
      <p class="center1"><img src="Images/026fig01.jpg" alt="" class="calibre2" width="353" height="246"/></p>
      
      
      <p class="calibre17">
         </p><p class="noind"><a id="iddle1062" class="calibre4"/>Linked memory addresses
         </p>
      <p class="calibre17"/>
      
      <p class="noind">It’s like a treasure hunt. You go to the first address, and it says, “The next item can be found at address 123.” So you go
         to address 123, and it says, “The next item can be found at address 847,” and so on. Adding an item to a linked list is easy:
         you stick it anywhere in memory and store the address with the previous item.
      </p>
      
      <p class="noind">With linked lists, you never have to move your items. You also avoid another problem. Let’s say you go to a popular movie
         with five of your friends. The six of you are trying to find a place to sit, but the theater is packed. There aren’t six seats
         together. Well, sometimes this happens with arrays. Let’s say you’re trying to find 10,000 slots for an array. Your memory
         has 10,000 slots, but it doesn’t have 10,000 slots together. You can’t get space for your array! A linked list is like saying,
         “Let’s split up and watch the movie.” If there’s space in memory, you have space for your linked list.
      </p>
      
      <p class="noind">If linked lists are so much better at inserts, what are arrays good for?</p>
      
      
      
      <h4 id="ch02lev2sec2" class="calibre22"><a id="ch02lev2sec2__title" class="calibre4"/>Arrays
      </h4>
      
      <p class="noind">Websites with top-10 lists use a scummy tactic to get more page views. Instead of showing you the list on one page, they put
         one item on each page and make you click Next to get to the next item in the list. For example, Top 10 Best TV Villains won’t
         show you the entire list on one page. Instead, you start at #10 (Newman), and you have to click Next on each page to reach
         #1 (Gustavo Fring). This technique gives the websites 10 whole pages on which to show you ads, but it’s boring to click Next
         9 times to get to #1. It would be much better if the whole list was on one page and you could click each person’s name for
         more info.
      </p>
      
      
      
      <p class="center1"><img src="Images/026fig02.jpg" alt="" class="calibre2" width="203" height="201"/></p>
      
      
      <p class="noind">Linked lists have a similar problem. Suppose you want to read the last item in a linked list. You can’t just read it, because
         you don’t know what address it’s at. Instead, you have to go to item #1 to get the address for <a id="iddle1061" class="calibre4"/><a id="iddle1251" class="calibre4"/>item #2. Then you have to go to item #2 to get the address for item #3. And so on, until you get to the last item. Linked
         lists are great if you’re going to read all the items one at a time: you can read one item, follow the address to the next
         item, and so on. But if you’re going to keep jumping around, linked lists are terrible.
      </p>
      
      <p class="noind">Arrays are different. You know the address for every item in your array. For example, suppose your array contains five items,
         and you know it starts at address 00. What is the address of item #5?
      </p>
      
      
      
      <p class="center1"><img src="Images/027fig01.jpg" alt="" class="calibre2" width="428" height="188"/></p>
      
      
      <p class="noind">Simple math tells you: it’s 04. Arrays are great if you want to read random elements, because you can look up any element
         in your array instantly. With a linked list, the elements aren’t next to each other, so you can’t instantly calculate the
         position of the fifth element in memory—you have to go to the first element to get the address to the second element, then
         go to the second element to get the address of the third element, and so on until you get to the fifth element.
      </p>
      
      
      
      <h4 id="ch02lev2sec3" class="calibre22"><a id="ch02lev2sec3__title" class="calibre4"/>Terminology
      </h4>
      
      <p class="noind">The elements in an array are numbered. This numbering starts from 0, not 1. For example, in this array, 20 is at position
         1.
      </p>
      
      
      
      <p class="center1"><img src="Images/027fig02.jpg" alt="" class="calibre2" width="236" height="109"/></p>
      
      
      <p class="noind">And 10 is at position 0. This usually throws new programmers for a spin. Starting at 0 makes all kinds of array-based code
         easier to write, so programmers have stuck with it. Almost every programming language you use will number array elements starting
         at 0. You’ll soon get used to it.
      </p>
      
      <p class="noind"><a id="iddle1059" class="calibre4"/><a id="iddle1060" class="calibre4"/><a id="iddle1216" class="calibre4"/><a id="iddle1247" class="calibre4"/><a id="iddle1249" class="calibre4"/>The position of an element is called its <i class="calibre6">index.</i> So instead of saying, “20 is at <i class="calibre6">position</i> 1,” the correct terminology is, “20 is at <i class="calibre6">index</i> 1.” I’ll use <i class="calibre6">index</i> to mean <i class="calibre6">position</i> throughout this book.
      </p>
      
      <p class="noind">Here are the run times for common operations on arrays and lists.</p>
      
      
      
      <p class="center1"><img src="Images/028fig01.jpg" alt="" class="calibre2" width="319" height="251"/></p>
      
      
      <p class="noind">Question: Why does it take O(<i class="calibre6">n</i>) time to insert an element into an array? Suppose you wanted to insert an element at the beginning of an array. How would
         you do it? How long would it take? Find the answers to these questions in the next section!
      </p>
      
      
      
      
      <h3 id="ch02lev1sec3" class="calibre13"><a id="ch02lev1sec3__title" class="calibre3"/>Exercise
      </h3>
      
      <p class="calibre17"><a id="ch02qa1" class="calibre4"/></p>
      <blockquote class="calibre15">
         <p class="calibre17"><a id="ch02qa1qe1" class="calibre4"/></p>
         <p class="calibre17"><a id="ch02qa1q1" class="calibre4"/><b class="calibre20">2.1 </b></p><p class="noind">Suppose you’re building an app to keep track of your finances.</p>
            
            
            
            <p class="center1"><img src="Images/028fig02.jpg" alt="" class="calibre2" width="180" height="123"/></p>
            
            
            <p class="noind">Every day, you write down everything you spent money on. At the end of the month, you review your expenses and sum up how
               much you spent. So, you have lots of inserts and a few reads. Should you use an array or a list?
            </p>
            
         <p class="calibre17"/>
      </blockquote>
      
      
      
      <h4 id="ch02lev2sec4" class="calibre22"><a id="ch02lev2sec4__title" class="calibre4"/>Inserting into the middle of a list
      </h4>
      
      <p class="noind">Suppose you want your todo list to work more like a calendar. Earlier, you were adding things to the end of the list.</p>
      
      <p class="noind">Now you want to add them in the order in which they should be done.</p>
      
      
      
      <p class="center1"><img src="Images/029fig01.jpg" alt="" class="calibre2" width="459" height="199"/></p>
      
      
      <p class="noind">What’s better if you want to insert elements in the middle: arrays or lists? With lists, it’s as easy as changing what the
         previous element points to.
      </p>
      
      
      
      <p class="center1"><img src="Images/029fig02.jpg" alt="" class="calibre2" width="500" height="155"/></p>
      
      
      <p class="noind">But for arrays, you have to shift all the rest of the elements down.</p>
      
      
      
      <p class="center1"><img src="Images/029fig03.jpg" alt="" class="calibre2" width="500" height="249"/></p>
      
      
      <p class="noind">And if there’s no space, you might have to copy everything to a new location! Lists are better if you want to insert elements
         into the middle.
      </p>
      
      
      
      
      <h4 id="ch02lev2sec5" class="calibre22"><a id="ch02lev2sec5__title" class="calibre4"/>Deletions
      </h4>
      
      <p class="noind"><a id="iddle1057" class="calibre4"/><a id="iddle1058" class="calibre4"/><a id="iddle1120" class="calibre4"/><a id="iddle1246" class="calibre4"/><a id="iddle1248" class="calibre4"/><a id="iddle1291" class="calibre4"/><a id="iddle1296" class="calibre4"/><a id="iddle1316" class="calibre4"/>What if you want to delete an element? Again, lists are better, because you just need to change what the previous element
         points to. With arrays, everything needs to be moved up when you delete an element.
      </p>
      
      <p class="noind">Unlike insertions, deletions will always work. Insertions can fail sometimes when there’s no space left in memory. But you
         can always delete an element.
      </p>
      
      <p class="noind">Here are the run times for common operations on arrays and linked lists.</p>
      
      
      
      <p class="center1"><img src="Images/030fig01.jpg" alt="" class="calibre2" width="351" height="207"/></p>
      
      
      <p class="noind">It’s worth mentioning that insertions and deletions are O(1) time only if you can instantly access the element to be deleted.
         It’s a common practice to keep track of the first and last items in a linked list, so it would take only O(1) time to delete
         those.
      </p>
      
      <p class="noind">Which are used more: arrays or lists? Obviously, it depends on the use case. But arrays see a lot of use because they allow
         random access. There are two different types of access: <i class="calibre6">random access</i> and <i class="calibre6">sequential access</i>. Sequential access means reading the elements one by one, starting at the first element. Linked lists can <i class="calibre6">only</i> do sequential access. If you want to read the 10th element of a linked list, you have to read the first 9 elements and follow
         the links to the 10th element. Random access means you can jump directly to the 10th element. You’ll frequently hear me say
         that arrays are faster at reads. This is because they provide random access. A lot of use cases require random access, so
         arrays are used a lot. Arrays and lists are used to implement other data structures, too (coming up later in the book).
      </p>
      
      
      
      
      
      <h3 id="ch02lev1sec4" class="calibre13"><a id="ch02lev1sec4__title" class="calibre3"/>Exercises
      </h3>
      
      <p class="calibre17"><a id="ch02qa2" class="calibre4"/></p>
      <blockquote class="calibre15">
         <p class="calibre17"><a id="ch02qa2qe1" class="calibre4"/></p>
         <p class="calibre17"><a id="ch02qa2q1" class="calibre4"/><b class="calibre20">2.2 </b></p><p class="noind"><a id="iddle1166" class="calibre4"/>Suppose you’re building an app for restaurants to take customer orders. Your app needs to store a list of orders. Servers
               keep adding orders to this list, and chefs take orders off the list and make them. It’s an order queue: servers add orders
               to the back of the queue, and the chef takes the first order off the queue and cooks it.
            </p>
            
            <p class="center1"><img src="Images/031fig01_alt.jpg" alt="" class="calibre2" width="590" height="226"/></p>
            
            <p class="noind">Would you use an array or a linked list to implement this queue? (Hint: Linked lists are good for inserts/deletes, and arrays
               are good for random access. Which one are you going to be doing here?)
            </p>
            
         <p class="calibre17"/>
      </blockquote>
      <blockquote class="calibre15">
         <p class="calibre17"><a id="ch02qa2qe2" class="calibre4"/></p>
         <p class="calibre17"><a id="ch02qa2q2" class="calibre4"/><b class="calibre20">2.3 </b></p><p class="noind">Let’s run a thought experiment. Suppose Facebook keeps a list of usernames. When someone tries to log in to Facebook, a search
               is done for their username. If their name is in the list of usernames, they can log in. People log in to Facebook pretty often,
               so there are a lot of searches through this list of usernames. Suppose Facebook uses binary search to search the list. Binary
               search needs random access—you need to be able to get to the middle of the list of usernames instantly. Knowing this, would
               you implement the list as an array or a linked list?
            </p>
            
         <p class="calibre17"/>
      </blockquote>
      <blockquote class="calibre15">
         <p class="calibre17"><a id="ch02qa2qe3" class="calibre4"/></p>
         <p class="calibre17"><a id="ch02qa2q3" class="calibre4"/><b class="calibre20">2.4 </b></p><p class="noind">People sign up for Facebook pretty often, too. Suppose you decided to use an array to store the list of users. What are the
               downsides of an array for inserts? In particular, suppose you’re using binary search to search for logins. What happens when
               you add new users to an array?
            </p>
            
         <p class="calibre17"/>
      </blockquote>
      <blockquote class="calibre15">
         <p class="calibre17"><a id="ch02qa2qe4" class="calibre4"/></p>
         <p class="calibre17"><a id="ch02qa2q4" class="calibre4"/><b class="calibre20">2.5 </b></p><p class="noind">In reality, Facebook uses neither an array nor a linked list to store user information. Let’s consider a hybrid data structure:
               an array of linked lists. You have an array with 26 slots. Each slot points to a linked list. For example, the first slot
               in the array points to a linked list containing all the usernames starting with a. The second slot points to a linked list
               containing all the usernames starting with b, and so on.
            </p>
            
            
            <p class="center1"><img src="Images/032fig01_alt.jpg" alt="" class="calibre2" width="590" height="195"/></p>
            
            <p class="noind"><a id="iddle1315" class="calibre4"/>Suppose Adit B signs up for Facebook, and you want to add them to the list. You go to slot 1 in the array, go to the linked
               list for slot 1, and add Adit B at the end. Now, suppose you want to search for Zakhir H. You go to slot 26, which points
               to a linked list of all the Z names. Then you search through that list to find Zakhir H.
            </p>
            
            <p class="noind">Compare this hybrid data structure to arrays and linked lists. Is it slower or faster than each for searching and inserting?
               You don’t have to give Big O run times, just whether the new data structure would be faster or slower.
            </p>
            
         <p class="calibre17"/>
      </blockquote>
      
      
      
      <h3 id="ch02lev1sec5" class="calibre13"><a id="ch02lev1sec5__title" class="calibre3"/>Selection sort
      </h3>
      
      <p class="noind">Let’s put it all together to learn your second algorithm: selection sort. To follow this section, you need to understand arrays
         and lists, as well as Big O notation.
      </p>
      
      
      
      <p class="center1"><img src="Images/032fig02.jpg" alt="" class="calibre2" width="284" height="275"/></p>
      
      
      <p class="noind">Suppose you have a bunch of music on your computer. For each artist, you have a play count.</p>
      
      
      
      <p class="center1"><img src="Images/032fig03.jpg" alt="" class="calibre2" width="308" height="302"/></p>
      
      
      <p class="noind">You want to sort this list from most to least played, so that you can rank your favorite artists. How can you do it?</p>
      
      <p class="noind">One way is to go through the list and find the most-played artist. Add that artist to a new list.</p>
      
      <p class="center1"><img src="Images/033fig01_alt.jpg" alt="" class="calibre2" width="590" height="318"/></p>
      
      <p class="noind">Do it again to find the next-most-played artist.</p>
      
      <p class="center1"><img src="Images/033fig02_alt.jpg" alt="" class="calibre2" width="590" height="344"/></p>
      
      <p class="noind">Keep doing this, and you’ll end up with a sorted list.</p>
      
      
      
      <p class="center1"><img src="Images/033fig03.jpg" alt="" class="calibre2" width="336" height="341"/></p>
      
      
      <p class="noind">Let’s put on our computer science hats and see how long this will take to run. Remember that O(<i class="calibre6">n</i>) time means you touch every element in a list once. For example, running simple search over the list of artists means looking
         at each artist once.
      </p>
      
      
      
      <p class="center1"><img src="Images/034fig01.jpg" alt="" class="calibre2" width="420" height="304"/></p>
      
      
      <p class="noind">To find the artist with the highest play count, you have to check each item in the list. This takes O(<i class="calibre6">n</i>) time, as you just saw. So you have an operation that takes O(<i class="calibre6">n</i>) time, and you have to do that <i class="calibre6">n</i> times:
      </p>
      
      <p class="center1"><img src="Images/034fig02_alt.jpg" alt="" class="calibre2" width="590" height="289"/></p>
      
      <p class="noind">This takes O(<i class="calibre6">n</i> × <i class="calibre6">n</i>) time or O(<i class="calibre6">n</i><sup class="calibre26">2</sup>) time.
      </p>
      
      <p class="noind">Sorting algorithms are very useful. Now you can sort</p>
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19">Names in a phone book
            
         </li>
         
         <li class="calibre19">Travel dates
            
         </li>
         
         <li class="calibre19">Emails (newest to oldest)
            
         </li>
         
      </ul>
      
      
      <p class="noind"/>
      <table width="100%" border="1" cellspacing="5" class="calibre7">
         <colgroup class="calibre23">
            <col width="550" class="calibre9"/>
         </colgroup>
         <tbody class="calibre10">
            <tr class="calibre11">
               <td class="calibre24"/>
            </tr>
         </tbody>
      </table>
      <div class="calibre14">
         
         <b id="ch02sb02" class="calibre20">Checking fewer elements each time</b>
         
         <p class="noind"><a id="iddle1112" class="calibre4"/>Maybe you’re wondering: as you go through the operations, the number of elements you have to check keeps decreasing. Eventually,
            you’re down to having to check just one element. So how can the run time still be O(<i class="calibre6">n</i><sup class="calibre26">2</sup>)? That’s a good question, and the answer has to do with constants in Big O notation. I’ll get into this more in <a href="kindle_split_010.xhtml#ch04" class="calibre4">chapter 4</a>, but here’s the gist.
         </p>
         
         <p class="noind">You’re right that you don’t have to check a list of <i class="calibre6">n</i> elements each time. You check <i class="calibre6">n</i> elements, then <i class="calibre6">n</i> – 1, <i class="calibre6">n</i> - 2 ... 2, 1. On average, you check a list that has ½ <i class="calibre6">n</i> elements. The runtime is O(<i class="calibre6">n</i> × ½ <i class="calibre6">n</i>). But constants like ½ are ignored in Big O notation (again, see <a href="kindle_split_010.xhtml#ch04" class="calibre4">chapter 4</a> for the full discussion), so you just write O(<i class="calibre6">n</i> × <i class="calibre6">n</i>) or O(<i class="calibre6">n</i><sup class="calibre26">2</sup>).
         </p>
         
      </div>
      <table width="100%" border="1" cellspacing="5" class="calibre7">
         <colgroup class="calibre23">
            <col width="550" class="calibre9"/>
         </colgroup>
         <tbody class="calibre10">
            <tr class="calibre11">
               <td class="calibre24"/>
            </tr>
         </tbody>
      </table>
      
      <p class="noind">Selection sort is a neat algorithm, but it’s not very fast. Quicksort is a faster sorting algorithm that only takes O(<i class="calibre6">n</i> log <i class="calibre6">n</i>) time. It’s coming up in the next chapter!
      </p>
      
      
      
      <h3 id="ch02lev1sec6" class="calibre13"><a id="ch02lev1sec6__title" class="calibre3"/>Example Code Listing
      </h3>
      
      <p class="noind">We didn’t show you the code to sort the music list, but following is some code that will do something very similar: sort an
         array from smallest to largest. Let’s write a function to find the smallest element in an array:
      </p>
      
      <p class="center1"><img src="Images/035fig01_alt.jpg" alt="" class="calibre2" width="590" height="149"/></p>
      
      <p class="noind">Now you can use this function to write selection sort:</p>
      
      <p class="center1"><img src="Images/035fig02_alt.jpg" alt="" class="calibre2" width="590" height="136"/></p>
      
      
      
      
      <p class="center1"><img src="Images/036fig01.jpg" alt="" class="calibre2" width="400" height="377"/></p>
      
      
      
      
      <h3 id="ch02lev1sec7" class="calibre13"><a id="ch02lev1sec7__title" class="calibre3"/>Recap
      </h3>
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19">Your computer’s memory is like a giant set of drawers.
            
         </li>
         
         <li class="calibre19">When you want to store multiple elements, use an array or a list.
            
         </li>
         
         <li class="calibre19">With an array, all your elements are stored right next to each other.
            
         </li>
         
         <li class="calibre19">With a list, elements are strewn all over, and one element stores the address of the next one.
            
         </li>
         
         <li class="calibre19">Arrays allow fast reads.
            
         </li>
         
         <li class="calibre19">Linked lists allow fast inserts and deletes.
            
         </li>
         
         <li class="calibre19">All elements in the array should be the same type (all ints, all doubles, and so on).
            
         </li>
         
      </ul>
      
      
      
      
      <div class="calibre16" id="calibre_pb_12"/>
</div>



  </body>
</html>