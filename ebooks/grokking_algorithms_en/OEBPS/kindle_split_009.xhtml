<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />
<style type="text/css" title="ibis-book">
    #sbo-rt-content .calibre{display:block;font-size:1em;margin-bottom:0;margin-left:5pt;margin-right:5pt;margin-top:0;padding-left:0;padding-right:0}#sbo-rt-content .calibre1{display:block;font-size:2em;font-weight:bold;line-height:1.2;margin-bottom:.67em;margin-left:0;margin-right:0;margin-top:.67em;text-align:center}#sbo-rt-content .calibre10{display:table-row-group;vertical-align:middle}#sbo-rt-content .calibre11{display:table-row;vertical-align:inherit}#sbo-rt-content .calibre12{display:block;font-family:"Liberation Mono",monospace;font-size:.77778em;margin-bottom:1em;margin-left:5px;margin-right:0;margin-top:1em;white-space:pre-wrap}#sbo-rt-content .calibre13{display:block;font-size:1.125em;font-weight:bold;line-height:1.2;margin-bottom:0;margin-left:0;margin-right:0;margin-top:40px}#sbo-rt-content .calibre14{display:block}#sbo-rt-content .calibre15{display:block;margin-bottom:1em;margin-left:1em;margin-right:1em;margin-top:1em}#sbo-rt-content .calibre16{display:block}#sbo-rt-content .calibre17{display:block;margin-bottom:1em;margin-left:0;margin-right:0;margin-top:1em}#sbo-rt-content .calibre18{display:block;list-style-type:disc;margin-bottom:1em;margin-right:0;margin-top:1em}#sbo-rt-content .calibre19{display:list-item}#sbo-rt-content .calibre2{height:auto;width:auto}#sbo-rt-content .calibre20{font-weight:bold}#sbo-rt-content .calibre21{font-family:"Liberation Mono",monospace}#sbo-rt-content .calibre22{display:block;font-weight:bold;margin-bottom:0;margin-left:0;margin-right:0;margin-top:30px}#sbo-rt-content .calibre23{display:table-column-group}#sbo-rt-content .calibre24{display:table-cell;padding-bottom:1px;padding-left:1px;padding-right:1px;padding-top:1px;text-align:inherit;vertical-align:inherit}#sbo-rt-content .calibre25{font-size:.75em;line-height:normal;vertical-align:sub}#sbo-rt-content .calibre26{font-size:.75em;line-height:normal;vertical-align:super}#sbo-rt-content .calibre27{display:block;list-style-type:decimal;margin-bottom:1em;margin-right:0;margin-top:1em}#sbo-rt-content .calibre28{font-size:smaller;line-height:normal;vertical-align:super}#sbo-rt-content .calibre29{font-size:.75em}#sbo-rt-content .calibre3{font-family:"Times";line-height:1.2}#sbo-rt-content .calibre30{font-size:.77778em;line-height:normal;vertical-align:super}#sbo-rt-content .calibre31{font-size:.71429em}#sbo-rt-content .calibre4{font-family:"Times"}#sbo-rt-content .calibre5{display:block;font-family:"Liberation Mono",monospace;font-size:.75em;margin-bottom:1em;margin-left:5px;margin-right:0;margin-top:1em;white-space:pre-wrap}#sbo-rt-content .calibre6{font-style:italic}#sbo-rt-content .calibre7{border-collapse:separate;border-spacing:2px;display:table;margin-bottom:0;margin-top:0;text-indent:0}#sbo-rt-content .calibre8{display:table-column-group;text-align:left}#sbo-rt-content .calibre9{display:table-column}#sbo-rt-content .center{display:block;font-weight:bold;margin-bottom:0;margin-left:0;margin-right:0;margin-top:30px;text-align:center}#sbo-rt-content .center1{display:block;margin-bottom:1em;margin-left:0;margin-right:0;margin-top:1em;text-align:center}#sbo-rt-content .docTableCell{display:table-cell;font-size:.75em;padding-bottom:1px;padding-left:1px;padding-right:1px;padding-top:1px;text-align:left;vertical-align:inherit}#sbo-rt-content .ind{display:block;margin-bottom:8px;margin-right:0;margin-top:0;text-align:left;text-indent:0}#sbo-rt-content .noind{display:block;margin-bottom:1em;margin-left:0;margin-right:0;margin-top:25px;text-indent:0}#sbo-rt-content .noindclose{display:block;margin-bottom:1em;margin-left:0;margin-right:0;margin-top:1em;text-indent:0}#sbo-rt-content .notetitle{display:block;font-size:.75em;font-weight:bold;margin-bottom:0;margin-left:0;margin-right:0;margin-top:2px}#sbo-rt-content .part{display:block;font-size:1.41667em;font-weight:bold;line-height:1.2;margin-bottom:0;margin-left:0;margin-right:0;margin-top:.83em}#sbo-rt-content .smaller{display:block;font-size:.75em;margin-bottom:1em;margin-left:1em;margin-right:1em;margin-top:1em}#sbo-rt-content .toc{display:block;margin-bottom:1em;margin-left:15px;margin-right:1em;margin-top:15px;text-indent:0}
    </style>
<style type="text/css" title="ibis-book">
    @page{margin-bottom:5pt;margin-top:5pt}
    </style>
<style type="text/css" id="font-styles">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }</style>
<style type="text/css" id="font-family">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }</style>
<style type="text/css" id="column-width">#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }</style>

<style type="text/css">body{margin:1em;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}body{background-color:transparent!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content" class="calibre"><h2 id="ch03" class="part">Chapter 3. <a id="ch03__title" class="calibre3"/>Recursion
      </h2>
      
      
      
      <p class="center1"><img src="Images/common.jpg" alt="" class="calibre2" width="134" height="148"/></p>
      
      
      <p class="noind"><a id="iddle1298" class="calibre4"/><a id="iddle1301" class="calibre4"/><b class="calibre20">In this chapter</b></p>
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19">You learn about recursion. Recursion is a coding technique used in many algorithms. It’s a building block for understanding
            later chapters in this book.
            
         </li>
         
         <li class="calibre19">You learn how to break a problem down into a base case and a recursive case. The divide-and-conquer strategy (<a href="kindle_split_010.xhtml#ch04" class="calibre4">chapter 4</a>) uses this simple concept to solve hard problems.
            
         </li>
         
      </ul>
      
      <p class="noind">I’m excited about this chapter because it covers <i class="calibre6">recursion</i>, an elegant way to solve problems. Recursion is one of my favorite topics, but it’s divisive. People either love it or hate
         it, or hate it until they learn to love it a few years later. I personally was in that third camp. To make things easier for
         you, I have some advice:
      </p>
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19">This chapter has a lot of code examples. Run the code for yourself to see how it works.
            
         </li>
         
         <li class="calibre19">I’ll talk about recursive functions. At least once, step through a recursive function with pen and paper: something like,
            “Let’s see, I pass 5 into <kbd class="calibre21">factorial</kbd>, and then I return 5 times passing 4 into <kbd class="calibre21">factorial</kbd>, which is ...,” and so on. Walking through a function like this will teach you how a recursive function works.
            
         </li>
         
      </ul>
      
      <p class="noind"><a id="iddle1285" class="calibre4"/>This chapter also includes a lot of pseudocode. <i class="calibre6">Pseudocode</i> is a high-level description of the problem you’re trying to solve, in code. It’s written like code, but it’s meant to be
         closer to human speech.
      </p>
      
      
      <h3 id="ch03lev1sec1" class="calibre13"><a id="ch03lev1sec1__title" class="calibre3"/>Recursion
      </h3>
      
      <p class="noind">Suppose you’re digging through your grandma’s attic and come across a mysterious locked suitcase.</p>
      
      
      
      <p class="center1"><img src="Images/038fig01.jpg" alt="" class="calibre2" width="500" height="187"/></p>
      
      
      <p class="noind">Grandma tells you that the key for the suitcase is probably in this other box.</p>
      
      <p class="center1"><img src="Images/038fig02_alt.jpg" alt="" class="calibre2" width="590" height="397"/></p>
      
      <p class="noind">This box contains more boxes, with more boxes inside those boxes. The key is in a box somewhere. What’s your algorithm to
         search for the key? Think of an algorithm before you read on.
      </p>
      
      <p class="noind">Here’s one approach.</p>
      
      
      
      <p class="center1"><img src="Images/039fig01.jpg" alt="" class="calibre2" width="350" height="378"/></p>
      
      
      <p class="calibre17"/>
      <ol class="calibre27">
         
         <li class="calibre19">Make a pile of boxes to look through.
            
         </li>
         
         <li class="calibre19">Grab a box, and look through it.
            
         </li>
         
         <li class="calibre19">If you find a box, add it to the pile to look through later.
            
         </li>
         
         <li class="calibre19">If you find a key, you’re done!
            
         </li>
         
         <li class="calibre19">Repeat.
            
         </li>
         
      </ol>
      
      <p class="noind">Here’s an alternate approach.</p>
      
      
      
      <p class="center1"><img src="Images/039fig02.jpg" alt="" class="calibre2" width="452" height="273"/></p>
      
      
      <p class="calibre17"/>
      <ol class="calibre27">
         
         <li class="calibre19">Look through the box.
            
         </li>
         
         <li class="calibre19">If you find a box, go to step 1.
            
         </li>
         
         <li class="calibre19">If you find a key, you’re done!
            
         </li>
         
      </ol>
      
      <p class="noind"><a id="iddle1063" class="calibre4"/><a id="iddle1104" class="calibre4"/><a id="iddle1286" class="calibre4"/><a id="iddle1299" class="calibre4"/>Which approach seems easier to you? The first approach uses a <kbd class="calibre21">while</kbd> loop. While the pile isn’t empty, grab a box and look through it:
      </p>
      
      <pre id="PLd0e3029" class="calibre5"><b class="calibre20">def</b> look_for_key(main_box):
  pile = main_box.make_a_pile_to_look_through()
  <b class="calibre20">while</b> pile is not empty:
    box = pile.grab_a_box()
    <b class="calibre20">for</b> item in box:
      <b class="calibre20">if</b> item.is_a_box():
        pile.append(item)
      <b class="calibre20">elif</b> item.is_a_key():
        print "found the key!"</pre>
      
      <p class="noind">The second way uses recursion. <i class="calibre6">Recursion</i> is where a function calls itself. Here’s the second way in pseudocode:
      </p>
      
      
      
      <p class="center1"><img src="Images/040fig01.jpg" alt="" class="calibre2" width="489" height="136"/></p>
      
      
      <p class="noind">Both approaches accomplish the same thing, but the second approach is clearer to me. Recursion is used when it makes the solution
         clearer. There’s no performance benefit to using recursion; in fact, loops are sometimes better for performance. I like this
         quote by Leigh Caldwell on Stack Overflow: “Loops may achieve a performance gain for your program. Recursion may achieve a
         performance gain for your programmer. Choose which is more important in your situation!”<sup class="calibre26">[<a href="#ch03fn01" class="calibre4">1</a>]</sup></p>
      <blockquote class="smaller">
         <p class="calibre17"><sup class="calibre28"><a id="ch03fn01" class="calibre4">1</a></sup> 
            </p><div class="calibre14"><b class="calibre20"><a href="http://stackoverflow.com/a/72694/139117" class="calibre4">http://stackoverflow.com/a/72694/139117</a>.</b></div>
         <p class="calibre17"/>
      </blockquote>
      
      <p class="noind">Many important algorithms use recursion, so it’s important to understand the concept.</p>
      
      
      
      <h3 id="ch03lev1sec2" class="calibre13"><a id="ch03lev1sec2__title" class="calibre3"/>Base case and recursive case
      </h3>
      
      
      
      <p class="center1"><img src="Images/040fig02.jpg" alt="" class="calibre2" width="181" height="223"/></p>
      
      
      <p class="noind">Because a recursive function calls itself, it’s easy to write a function incorrectly that ends up in an infinite loop. For
         example, suppose you want to write a function that prints a countdown, like this:
      </p>
      
      <pre id="PLd0e3091" class="calibre5">&gt; 3...2...1</pre>
      
      <p class="noind"><a id="iddle1064" class="calibre4"/><a id="iddle1115" class="calibre4"/><a id="iddle1119" class="calibre4"/>You can write it recursively, like so:
      </p>
      
      <pre id="PLd0e3116" class="calibre5">def countdown(i):
print i
countdown(i-1)</pre>
      
      <p class="noind">Write out this code and run it. You’ll notice a problem: this function will run forever!</p>
      
      
      
      <p class="center1"><img src="Images/041fig01.jpg" alt="" class="calibre2" width="372" height="138"/></p>
      
      
      <p class="calibre17">
         </p><p class="noind">Infinite loop</p>
      <p class="calibre17"/>
      
      <pre id="PLd0e3136" class="calibre5">&gt; 3...2...1...0...-1...-2...</pre>
      
      <p class="noind">(Press Ctrl-C to kill your script.)</p>
      
      <p class="noind">When you write a recursive function, you have to tell it when to stop recursing. That’s why <i class="calibre6">every recursive function has two parts: the base case, and the recursive case.</i> The recursive case is when the function calls itself. The base case is when the function doesn’t call itself again ... so
         it doesn’t go into an infinite loop.
      </p>
      
      <p class="noind">Let’s add a base case to the countdown function:</p>
      
      
      
      <p class="center1"><img src="Images/041fig02.jpg" alt="" class="calibre2" width="347" height="135"/></p>
      
      
      <p class="noind">Now the function works as expected. It goes something like this.</p>
      
      
      
      <p class="center1"><img src="Images/041fig03.jpg" alt="" class="calibre2" width="500" height="268"/></p>
      
      
      
      
      
      <h3 id="ch03lev1sec3" class="calibre13"><a id="ch03lev1sec3__title" class="calibre3"/>The stack
      </h3>
      
      <p class="noind"><a id="iddle1105" class="calibre4"/><a id="iddle1280" class="calibre4"/><a id="iddle1289" class="calibre4"/><a id="iddle1342" class="calibre4"/><a id="iddle1347" class="calibre4"/>This section covers the <i class="calibre6">call stack</i>. It’s an important concept in programming. The call stack is an important concept in general programming, and it’s also important
         to understand when using recursion.
      </p>
      
      
      
      <p class="center1"><img src="Images/042fig01.jpg" alt="" class="calibre2" width="270" height="239"/></p>
      
      
      <p class="noind">Suppose you’re throwing a barbecue. You keep a todo list for the barbecue, in the form of a stack of sticky notes.</p>
      
      
      
      <p class="center1"><img src="Images/042fig02.jpg" alt="" class="calibre2" width="187" height="123"/></p>
      
      
      <p class="noind">Remember back when we talked about arrays and lists, and you had a todo list? You could add todo items anywhere to the list
         or delete random items. The stack of sticky notes is much simpler. When you insert an item, it gets added to the top of the
         list. When you read an item, you only read the topmost item, and it’s taken off the list. So your todo list has only two actions:
         <i class="calibre6">push</i> (insert) and <i class="calibre6">pop</i> (remove and read).
      </p>
      
      
      
      <p class="center1"><img src="Images/042fig03.jpg" alt="" class="calibre2" width="500" height="216"/></p>
      
      
      <p class="noind">Let’s see the todo list in action.</p>
      
      <p class="center1"><img src="Images/042fig04_alt.jpg" alt="" class="calibre2" width="590" height="206"/></p>
      
      <p class="noind">This data structure is called a <i class="calibre6">stack</i>. The stack is a simple data structure. You’ve been using a stack this whole time without realizing it!
      </p>
      
      
      
      <h4 id="ch03lev2sec1" class="calibre22"><a id="ch03lev2sec1__title" class="calibre4"/>The call stack
      </h4>
      
      <p class="noind"><a id="iddle1200" class="calibre4"/><a id="iddle1267" class="calibre4"/><a id="iddle1281" class="calibre4"/><a id="iddle1343" class="calibre4"/>Your computer uses a stack internally called the <i class="calibre6">call stack.</i> Let’s see it in action. Here’s a simple function:
      </p>
      
      <pre id="PLd0e3299" class="calibre5"><b class="calibre20">def</b> greet(name):
    print "hello, " + name + "!"
    greet2(name)
    print "getting ready to say bye..."
    bye()</pre>
      
      <p class="noind">This function greets you and then calls two other functions. Here are those two functions:</p>
      
      <pre id="PLd0e3310" class="calibre5"><b class="calibre20">def</b> greet2(name):
    print "how are you, " + name + "?"

  <b class="calibre20">def</b> bye():
    print "ok bye!"</pre>
      
      <p class="noind">Let’s walk through what happens when you call a function.</p>
      
      <table width="100%" border="1" cellspacing="5" class="calibre7">
         <colgroup class="calibre23">
            <col width="550" class="calibre9"/>
         </colgroup>
         <tbody class="calibre10">
            <tr class="calibre11">
               <td class="calibre24"/>
            </tr>
         </tbody>
      </table>
      <h5 id="ch03note01" class="notetitle">Note</h5>
      
      
      <p class="noindclose"><kbd class="calibre21">print</kbd> is a function in Python, but to make things easier for this example, we’re pretending it isn’t. Just play along.
      </p>
      
      <table width="100%" border="1" cellspacing="5" class="calibre7">
         <colgroup class="calibre23">
            <col width="550" class="calibre9"/>
         </colgroup>
         <tbody class="calibre10">
            <tr class="calibre11">
               <td class="calibre24"/>
            </tr>
         </tbody>
      </table>
      
      <p class="noind">Suppose you call <kbd class="calibre21">greet("maggie")</kbd>. First, your computer allocates a box of memory for that function call.
      </p>
      
      
      
      <p class="center1"><img src="Images/043fig01.jpg" alt="" class="calibre2" width="266" height="109"/></p>
      
      
      <p class="noind">Now let’s use the memory. The variable <kbd class="calibre21">name</kbd> is set to “maggie”. That needs to be saved in memory.
      </p>
      
      
      
      <p class="center1"><img src="Images/043fig02.jpg" alt="" class="calibre2" width="255" height="114"/></p>
      
      
      <p class="noind"><a id="iddle1102" class="calibre4"/><a id="iddle1199" class="calibre4"/>Every time you make a function call, your computer saves the values for all the variables for that call in memory like this.
         Next, you print <kbd class="calibre21">hello, maggie!</kbd> Then you call <kbd class="calibre21">greet2("maggie").</kbd> Again, your computer allocates a box of memory for this function call.
      </p>
      
      
      
      <p class="center1"><img src="Images/044fig01.jpg" alt="" class="calibre2" width="458" height="195"/></p>
      
      
      <p class="noind">Your computer is using a stack for these boxes. The second box is added on top of the first one. You print <kbd class="calibre21">how are you, maggie?</kbd> Then you return from the function call. When this happens, the box on top of the stack gets popped off.
      </p>
      
      
      
      <p class="center1"><img src="Images/044fig02.jpg" alt="" class="calibre2" width="329" height="179"/></p>
      
      
      <p class="noind">Now the topmost box on the stack is for the <kbd class="calibre21">greet</kbd> function, which means you returned back to the <kbd class="calibre21">greet</kbd> function. When you called the <kbd class="calibre21">greet2</kbd> function, the <kbd class="calibre21">greet</kbd> function was <i class="calibre6">partially completed.</i> This is the big idea behind this section: <i class="calibre6">when you call a function from another function, the calling function is paused in a partially completed state.</i> All the values of the variables for that function are still stored in memory. Now that you’re done with the <kbd class="calibre21">greet2</kbd> function, you’re back to the <kbd class="calibre21">greet</kbd> function, and you pick up where you left off. First you print <kbd class="calibre21">getting ready to say bye...</kbd>. You call the <kbd class="calibre21">bye</kbd> function.
      </p>
      
      
      
      <p class="center1"><img src="Images/044fig03.jpg" alt="" class="calibre2" width="242" height="149"/></p>
      
      
      <p class="noind"><a id="iddle1106" class="calibre4"/><a id="iddle1167" class="calibre4"/><a id="iddle1169" class="calibre4"/><a id="iddle1300" class="calibre4"/><a id="iddle1344" class="calibre4"/><a id="iddle1345" class="calibre4"/>A box for that function is added to the top of the stack. Then you print <kbd class="calibre21">ok bye!</kbd> and return from the function call.
      </p>
      
      
      
      <p class="center1"><img src="Images/045fig01.jpg" alt="" class="calibre2" width="285" height="149"/></p>
      
      
      <p class="noind">And you’re back to the <kbd class="calibre21">greet</kbd> function. There’s nothing else to be done, so you return from the <kbd class="calibre21">greet</kbd> function too. This stack, used to save the variables for multiple functions, is called the <i class="calibre6">call stack</i>.
      </p>
      
      
      
      
      <h3 id="ch03lev1sec4" class="calibre13"><a id="ch03lev1sec4__title" class="calibre3"/>Exercise
      </h3>
      
      <p class="calibre17"><a id="ch03qa1" class="calibre4"/></p>
      <blockquote class="calibre15">
         <p class="calibre17"><a id="ch03qa1qe1" class="calibre4"/></p>
         <p class="calibre17"><a id="ch03qa1q1" class="calibre4"/><b class="calibre20">3.1 </b></p><p class="noind">Suppose I show you a call stack like this.</p>
            
            
            
            <p class="center1"><img src="Images/045fig02.jpg" alt="" class="calibre2" width="231" height="166"/></p>
            
            
            <p class="noind">What information can you give me, just based on this call stack?</p>
            
            <p class="noind">Now let’s see the call stack in action with a recursive function.</p>
            
         <p class="calibre17"/>
      </blockquote>
      
      
      <h4 id="ch03lev2sec2" class="calibre22"><a id="ch03lev2sec2__title" class="calibre4"/>The call stack with recursion
      </h4>
      
      <p class="noind">Recursive functions use the call stack too! Let’s look at this in action with the <kbd class="calibre21">factorial</kbd> function. <kbd class="calibre21">factorial(5)</kbd> is written as 5!, and it’s defined like this: 5! = 5 * 4 * 3 * 2 * 1. Similarly, <kbd class="calibre21">factorial(3)</kbd> is 3 * 2 * 1. Here’s a recursive function to calculate the factorial of a number:
      </p>
      
      <pre id="PLd0e3558" class="calibre5"><b class="calibre20">def</b> fact(x):
  <b class="calibre20">if</b> x == 1:
    <b class="calibre20">return</b> 1
  <b class="calibre20">else:</b>
    <b class="calibre20">return</b> x * fact(x-1)</pre>
      
      <p class="noind">Now you call <kbd class="calibre21">fact(3)</kbd>. Let’s step through this call line by line and see how the stack changes. Remember, the topmost box in the stack tells you
         what call to <kbd class="calibre21">fact</kbd> you’re currently on.
      </p>
      
      
      <p class="center1"><img src="Images/046fig01_alt.jpg" alt="" class="calibre2" width="590" height="784"/></p>
      
      
      <p class="center1"><img src="Images/047fig01_alt.jpg" alt="" class="calibre2" width="590" height="240"/></p>
      
      <p class="noind"><a id="iddle1168" class="calibre4"/>Notice that each call to <kbd class="calibre21">fact</kbd> has its own copy of <kbd class="calibre21">x</kbd>. You can’t access a different function’s copy of <kbd class="calibre21">x</kbd>.
      </p>
      
      <p class="noind">The stack plays a big part in recursion. In the opening example, there were two approaches to find the key. Here’s the first
         way again.
      </p>
      
      
      
      <p class="center1"><img src="Images/047fig02.jpg" alt="" class="calibre2" width="331" height="339"/></p>
      
      
      <p class="noind">This way, you make a pile of boxes to search through, so you always know what boxes you still need to search.</p>
      
      
      
      <p class="center1"><img src="Images/047fig03.jpg" alt="" class="calibre2" width="383" height="263"/></p>
      
      
      <p class="noind">But in the recursive approach, there’s no pile.</p>
      
      
      
      <p class="center1"><img src="Images/048fig01.jpg" alt="" class="calibre2" width="383" height="236"/></p>
      
      
      <p class="noind">If there’s no pile, how does your algorithm know what boxes you still have to look through? Here’s an example.</p>
      
      
      
      <p class="center1"><img src="Images/048fig02.jpg" alt="" class="calibre2" width="500" height="499"/></p>
      
      
      <p class="noind"><a id="iddle1346" class="calibre4"/>At this point, the call stack looks like this.
      </p>
      
      
      
      <p class="center1"><img src="Images/049fig01.jpg" alt="" class="calibre2" width="348" height="242"/></p>
      
      
      <p class="noind">The “pile of boxes” is saved on the stack! This is a stack of half-completed function calls, each with its own half-complete
         list of boxes to look through. Using the stack is convenient because you don’t have to keep track of a pile of boxes yourself—the
         stack does it for you.
      </p>
      
      <p class="noind">Using the stack is convenient, but there’s a cost: saving all that info can take up a lot of memory. Each of those function
         calls takes up some memory, and when your stack is too tall, that means your computer is saving information for many function
         calls. At that point, you have two options:
      </p>
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19">You can rewrite your code to use a loop instead.
            
         </li>
         
         <li class="calibre19">You can use something called <i class="calibre6">tail recursion</i>. That’s an advanced recursion topic that is out of the scope of this book. It’s also only supported by some languages, not
            all.
            
         </li>
         
      </ul>
      
      
      
      
      <h3 id="ch03lev1sec5" class="calibre13"><a id="ch03lev1sec5__title" class="calibre3"/>Exercise
      </h3>
      
      <p class="calibre17"><a id="ch03qa2" class="calibre4"/></p>
      <blockquote class="calibre15">
         <p class="calibre17"><a id="ch03qa2qe1" class="calibre4"/></p>
         <p class="calibre17"><a id="ch03qa2q1" class="calibre4"/><b class="calibre20">3.2 </b></p><p class="noind">Suppose you accidentally write a recursive function that runs forever. As you saw, your computer allocates memory on the stack
               for each function call. What happens to the stack when your recursive function runs forever?
            </p>
            
         <p class="calibre17"/>
      </blockquote>
      
      
      
      
      <h3 id="ch03lev1sec6" class="calibre13"><a id="ch03lev1sec6__title" class="calibre3"/>Recap
      </h3>
      
      
      
      <p class="center1"><img src="Images/050fig01.jpg" alt="" class="calibre2" width="256" height="237"/></p>
      
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19">Recursion is when a function calls itself.
            
         </li>
         
         <li class="calibre19">Every recursive function has two cases: the base case and the recursive case.
            
         </li>
         
         <li class="calibre19">A stack has two operations: push and pop.
            
         </li>
         
         <li class="calibre19">All function calls go onto the call stack.
            
         </li>
         
         <li class="calibre19">The call stack can get very large, which takes up a lot of memory.
            
         </li>
         
      </ul>
      
      
      
      
      <div class="calibre16" id="calibre_pb_14"/>
</div>



  </body>
</html>