<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />
<style type="text/css" title="ibis-book">
    #sbo-rt-content .calibre{display:block;font-size:1em;margin-bottom:0;margin-left:5pt;margin-right:5pt;margin-top:0;padding-left:0;padding-right:0}#sbo-rt-content .calibre1{display:block;font-size:2em;font-weight:bold;line-height:1.2;margin-bottom:.67em;margin-left:0;margin-right:0;margin-top:.67em;text-align:center}#sbo-rt-content .calibre10{display:table-row-group;vertical-align:middle}#sbo-rt-content .calibre11{display:table-row;vertical-align:inherit}#sbo-rt-content .calibre12{display:block;font-family:"Liberation Mono",monospace;font-size:.77778em;margin-bottom:1em;margin-left:5px;margin-right:0;margin-top:1em;white-space:pre-wrap}#sbo-rt-content .calibre13{display:block;font-size:1.125em;font-weight:bold;line-height:1.2;margin-bottom:0;margin-left:0;margin-right:0;margin-top:40px}#sbo-rt-content .calibre14{display:block}#sbo-rt-content .calibre15{display:block;margin-bottom:1em;margin-left:1em;margin-right:1em;margin-top:1em}#sbo-rt-content .calibre16{display:block}#sbo-rt-content .calibre17{display:block;margin-bottom:1em;margin-left:0;margin-right:0;margin-top:1em}#sbo-rt-content .calibre18{display:block;list-style-type:disc;margin-bottom:1em;margin-right:0;margin-top:1em}#sbo-rt-content .calibre19{display:list-item}#sbo-rt-content .calibre2{height:auto;width:auto}#sbo-rt-content .calibre20{font-weight:bold}#sbo-rt-content .calibre21{font-family:"Liberation Mono",monospace}#sbo-rt-content .calibre22{display:block;font-weight:bold;margin-bottom:0;margin-left:0;margin-right:0;margin-top:30px}#sbo-rt-content .calibre23{display:table-column-group}#sbo-rt-content .calibre24{display:table-cell;padding-bottom:1px;padding-left:1px;padding-right:1px;padding-top:1px;text-align:inherit;vertical-align:inherit}#sbo-rt-content .calibre25{font-size:.75em;line-height:normal;vertical-align:sub}#sbo-rt-content .calibre26{font-size:.75em;line-height:normal;vertical-align:super}#sbo-rt-content .calibre27{display:block;list-style-type:decimal;margin-bottom:1em;margin-right:0;margin-top:1em}#sbo-rt-content .calibre28{font-size:smaller;line-height:normal;vertical-align:super}#sbo-rt-content .calibre29{font-size:.75em}#sbo-rt-content .calibre3{font-family:"Times";line-height:1.2}#sbo-rt-content .calibre30{font-size:.77778em;line-height:normal;vertical-align:super}#sbo-rt-content .calibre31{font-size:.71429em}#sbo-rt-content .calibre4{font-family:"Times"}#sbo-rt-content .calibre5{display:block;font-family:"Liberation Mono",monospace;font-size:.75em;margin-bottom:1em;margin-left:5px;margin-right:0;margin-top:1em;white-space:pre-wrap}#sbo-rt-content .calibre6{font-style:italic}#sbo-rt-content .calibre7{border-collapse:separate;border-spacing:2px;display:table;margin-bottom:0;margin-top:0;text-indent:0}#sbo-rt-content .calibre8{display:table-column-group;text-align:left}#sbo-rt-content .calibre9{display:table-column}#sbo-rt-content .center{display:block;font-weight:bold;margin-bottom:0;margin-left:0;margin-right:0;margin-top:30px;text-align:center}#sbo-rt-content .center1{display:block;margin-bottom:1em;margin-left:0;margin-right:0;margin-top:1em;text-align:center}#sbo-rt-content .docTableCell{display:table-cell;font-size:.75em;padding-bottom:1px;padding-left:1px;padding-right:1px;padding-top:1px;text-align:left;vertical-align:inherit}#sbo-rt-content .ind{display:block;margin-bottom:8px;margin-right:0;margin-top:0;text-align:left;text-indent:0}#sbo-rt-content .noind{display:block;margin-bottom:1em;margin-left:0;margin-right:0;margin-top:25px;text-indent:0}#sbo-rt-content .noindclose{display:block;margin-bottom:1em;margin-left:0;margin-right:0;margin-top:1em;text-indent:0}#sbo-rt-content .notetitle{display:block;font-size:.75em;font-weight:bold;margin-bottom:0;margin-left:0;margin-right:0;margin-top:2px}#sbo-rt-content .part{display:block;font-size:1.41667em;font-weight:bold;line-height:1.2;margin-bottom:0;margin-left:0;margin-right:0;margin-top:.83em}#sbo-rt-content .smaller{display:block;font-size:.75em;margin-bottom:1em;margin-left:1em;margin-right:1em;margin-top:1em}#sbo-rt-content .toc{display:block;margin-bottom:1em;margin-left:15px;margin-right:1em;margin-top:15px;text-indent:0}
    </style>
<style type="text/css" title="ibis-book">
    @page{margin-bottom:5pt;margin-top:5pt}
    </style>
<style type="text/css" id="font-styles">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }</style>
<style type="text/css" id="font-family">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }</style>
<style type="text/css" id="column-width">#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }</style>

<style type="text/css">body{margin:1em;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}body{background-color:transparent!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content" class="calibre"><h2 id="ch11" class="part">Chapter 11. <a id="ch11__title" class="calibre3"/>Where to go next
      </h2>
      
      
      
      <p class="center1"><img src="Images/common.jpg" alt="" class="calibre2" width="134" height="148"/></p>
      
      
      <p class="noind"><a id="iddle1358" class="calibre4"/><b class="calibre20">In this chapter</b></p>
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19">You get a brief overview of 10 algorithms that weren’t covered in this book, and why they’re useful.
            
         </li>
         
         <li class="calibre19">You get pointers on what to read next, depending on what your interests are.
            
         </li>
         
      </ul>
      
      
      <h3 id="ch11lev1sec1" class="calibre13"><a id="ch11lev1sec1__title" class="calibre3"/>Trees
      </h3>
      
      <p class="noind">Let’s go back to the binary search example. When a user logs in to Facebook, Facebook has to look through a big array to see
         if the username exists. We said the fastest way to search through this array is to run binary search. But there’s a problem:
         every time a new user signs up, you insert their username into the array. Then you have to re-sort the array, because binary
         search only works with sorted arrays. Wouldn’t it be nice if you could insert <a id="iddle1087" class="calibre4"/>the username into the right slot in the array right away, so you don’t have to sort the array afterward? That’s the idea behind
         the <i class="calibre6">binary search tree</i> data structure.
      </p>
      
      
      
      <p class="center1"><img src="Images/203fig01.jpg" alt="" class="calibre2" width="287" height="322"/></p>
      
      
      <p class="noind">A binary search tree looks like this.</p>
      
      
      
      <p class="center1"><img src="Images/204fig01.jpg" alt="" class="calibre2" width="301" height="220"/></p>
      
      
      <p class="noind">For every node, the nodes to its left are <i class="calibre6">smaller</i> in value, and the nodes to the right are <i class="calibre6">larger</i> in value.
      </p>
      
      
      
      <p class="center1"><img src="Images/204fig02.jpg" alt="" class="calibre2" width="351" height="308"/></p>
      
      
      <p class="noind">Suppose you’re searching for Maggie. You start at the root node.</p>
      
      
      
      <p class="center1"><img src="Images/204fig03.jpg" alt="" class="calibre2" width="327" height="289"/></p>
      
      
      <p class="noind"><i class="calibre6">Maggie</i> comes after <i class="calibre6">David</i>, so go toward the right.
      </p>
      
      
      
      <p class="center1"><img src="Images/205fig01.jpg" alt="" class="calibre2" width="292" height="204"/></p>
      
      
      <p class="noind"><i class="calibre6">Maggie</i> comes before <i class="calibre6">Manning</i>, so go to the left.
      </p>
      
      
      
      <p class="center1"><img src="Images/205fig02.jpg" alt="" class="calibre2" width="292" height="217"/></p>
      
      
      <p class="noind">You found Maggie! It’s almost like running a binary search! Searching for an element in a binary search tree takes O(log <i class="calibre6">n</i>) time <i class="calibre6">on average</i> and O(<i class="calibre6">n</i>) time in the <i class="calibre6">worst case</i>. Searching a sorted array takes O(log <i class="calibre6">n</i>) time in the <i class="calibre6">worst case</i>, so you might think a sorted array is better. But a binary search tree is a lot faster for insertions and deletions on average.
      </p>
      
      
      
      <p class="center1"><img src="Images/205fig03.jpg" alt="" class="calibre2" width="378" height="197"/></p>
      
      
      <p class="noind">Binary search trees have some downsides too: for one thing, you don’t get random access. You can’t say, “Give me the fifth
         element of this tree.” Those performance times are also on <i class="calibre6">average</i> and rely on the tree being balanced. Suppose you have an imbalanced tree like the one shown next.
      </p>
      
      
      
      
      <p class="center1"><img src="Images/206fig01.jpg" alt="" class="calibre2" width="276" height="324"/></p>
      
      
      <p class="noind"><a id="iddle1217" class="calibre4"/>See how it’s leaning to the right? This tree doesn’t have very good performance, because it isn’t balanced. There are special
         binary search trees that balance themselves. One example is the red-black tree.
      </p>
      
      <p class="noind">So when are binary search trees used? <i class="calibre6">B-trees,</i> a special type of binary tree, are commonly used to store data in databases.
      </p>
      
      <p class="noind">If you’re interested in databases or more-advanced data structures, check these out:</p>
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19">B-trees
            
         </li>
         
         <li class="calibre19">Red-black trees
            
         </li>
         
         <li class="calibre19">Heaps
            
         </li>
         
         <li class="calibre19">Splay trees
            
         </li>
         
      </ul>
      
      
      
      <h3 id="ch11lev1sec2" class="calibre13"><a id="ch11lev1sec2__title" class="calibre3"/>Inverted indexes
      </h3>
      
      <p class="noind">Here’s a very simplified version of how a search engine works. Suppose you have three web pages with this simple content.</p>
      
      
      
      <p class="center1"><img src="Images/206fig02.jpg" alt="" class="calibre2" width="482" height="175"/></p>
      
      
      <p class="noind"><a id="iddle1068" class="calibre4"/><a id="iddle1180" class="calibre4"/><a id="iddle1219" class="calibre4"/><a id="iddle1265" class="calibre4"/><a id="iddle1335" class="calibre4"/>Let’s build a hash table from this content.
      </p>
      
      
      
      <p class="center1"><img src="Images/207fig01.jpg" alt="" class="calibre2" width="157" height="244"/></p>
      
      
      <p class="noind">The keys of the hash table are the words, and the values tell you what pages each word appears on. Now suppose a user searches
         for <i class="calibre6">hi</i>. Let’s see what pages <i class="calibre6">hi</i> shows up on.
      </p>
      
      
      
      <p class="center1"><img src="Images/207fig02.jpg" alt="" class="calibre2" width="177" height="108"/></p>
      
      
      <p class="noind">Aha: It appears on pages A and B. Let’s show the user those pages as the result. Or suppose the user searches for <i class="calibre6">there</i>. Well, you know that it shows up on pages A and C. Pretty easy, huh? This is a useful data structure: a hash that maps words
         to places where they appear. This data structure is called an <i class="calibre6">inverted index</i>, and it’s commonly used to build search engines. If you’re interested in search, this is a good place to start.
      </p>
      
      
      
      <h3 id="ch11lev1sec3" class="calibre13"><a id="ch11lev1sec3__title" class="calibre3"/>The Fourier transform
      </h3>
      
      <p class="noind">The Fourier transform is one of those rare algorithms: brilliant, elegant, and with a million use cases. The best analogy
         for the Fourier transform comes from Better Explained (a great website that explains math simply): given a smoothie, the Fourier
         transform will tell you the ingredients in the smoothie.<sup class="calibre26">[<a href="#ch11fn01" class="calibre4">1</a>]</sup> Or, to put it another way, given a song, the transform can separate it into individual frequencies.
      </p>
      <blockquote class="smaller">
         <p class="calibre17"><sup class="calibre28"><a id="ch11fn01" class="calibre4">1</a></sup> 
            </p><div class="calibre14"><b class="calibre20">Kalid, “An Interactive Guide to the Fourier Transform,” Better Explained, <a href="http://mng.bx/874X" class="calibre4">http://mng.bx/874X</a>.</b></div>
         <p class="calibre17"/>
      </blockquote>
      
      <p class="noind">It turns out that this simple idea has a lot of use cases. For example, if you can separate a song into frequencies, you can
         boost the ones you care about. You could boost the bass and hide the treble. The Fourier transform is great for processing
         signals. You can also use it to compress music. First you break an audio file down into its ingredient notes. The Fourier
         transform tells you exactly how much each note contributes to the overall song. So you can just get rid of the notes that
         aren’t important. That’s how the MP3 format works!
      </p>
      
      <p class="noind">Music isn’t the only type of digital signal. The JPG format is another compressed format, and it works the same way. People
         use the Fourier transform to try to predict upcoming earthquakes and analyze DNA. <a id="iddle1048" class="calibre4"/><a id="iddle1252" class="calibre4"/><a id="iddle1275" class="calibre4"/>You can use it to build an app like Shazam, which guesses what song is playing. The Fourier transform has a lot of uses. Chances
         are high that you’ll run into it!
      </p>
      
      
      
      <h3 id="ch11lev1sec4" class="calibre13"><a id="ch11lev1sec4__title" class="calibre3"/>Parallel algorithms
      </h3>
      
      <p class="noind">The next three topics are about scalability and working with a lot of data. Back in the day, computers kept getting faster
         and faster. If you wanted to make your algorithm faster, you could wait a few months, and the computers themselves would become
         faster. But we’re near the end of that period. Instead, laptops and computers ship with multiple cores. To make your algorithms
         faster, you need to change them to run in parallel across all the cores at once!
      </p>
      
      <p class="noind">Here’s a simple example. The best you can do with a sorting algorithm is roughly O(<i class="calibre6">n</i> log <i class="calibre6">n</i>). It’s well known that you can’t sort an array in O(<i class="calibre6">n</i>) time—<i class="calibre6">unless you use a parallel algorithm</i>! There’s a parallel version of quicksort that will sort an array in O(<i class="calibre6">n</i>) time.
      </p>
      
      <p class="noind">Parallel algorithms are hard to design. And it’s also hard to make sure they work correctly and to figure out what type of
         speed boost you’ll see. One thing is for sure—the time gains aren’t linear. So if you have two cores in your laptop instead
         of one, that almost never means your algorithm will magically run twice as fast. There are a couple of reasons for this:
      </p>
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19"><b class="calibre20"><i class="calibre6">Overhead of managing the parallelism—</i> </b>Suppose you have to sort an array of 1,000 items. How do you divide this task among the two cores? Do you give each core 500
            items to sort and then merge the two sorted arrays into one big sorted array? Merging the two arrays takes time.
            
         </li>
         
         <li class="calibre19"><b class="calibre20"><i class="calibre6">Load balancing—</i> </b>Suppose you have 10 tasks to do, so you give each core 5 tasks. But core A gets all the easy tasks, so it’s done in 10 seconds,
            whereas core B gets all the hard tasks, so it takes a minute. That means core A was sitting idle for 50 seconds while core
            B was doing all the work! How do you distribute the work evenly so both cores are working equally hard?
            
         </li>
         
      </ul>
      
      <p class="noind">If you’re interested in the theoretical side of performance and scalability, parallel algorithms might be for you!</p>
      
      
      
      
      <h3 id="ch11lev1sec5" class="calibre13"><a id="ch11lev1sec5__title" class="calibre3"/>MapReduce
      </h3>
      
      <p class="noind"><a id="iddle1030" class="calibre4"/><a id="iddle1045" class="calibre4"/><a id="iddle1046" class="calibre4"/><a id="iddle1133" class="calibre4"/><a id="iddle1261" class="calibre4"/><a id="iddle1341" class="calibre4"/>There’s a special type of parallel algorithm that is becoming increasingly popular: the <i class="calibre6">distributed algorithm</i>. It’s fine to run a parallel algorithm on your laptop if you need two to four cores, but what if you need hundreds of cores?
         Then you can write your algorithm to run across multiple machines. The MapReduce algorithm is a popular distributed algorithm.
         You can use it through the popular open source tool Apache Hadoop.
      </p>
      
      
      <h4 id="ch11lev2sec1" class="calibre22"><a id="ch11lev2sec1__title" class="calibre4"/>Why are distributed algorithms useful?
      </h4>
      
      <p class="noind">Suppose you have a table with billions or trillions of rows, and you want to run a complicated SQL query on it. You can’t
         run it on MySQL, because it struggles after a few billion rows. Use MapReduce through Hadoop!
      </p>
      
      <p class="noind">Or suppose you have to process a long list of jobs. Each job takes 10 seconds to process, and you need to process 1 million
         jobs like this. If you do this on one machine, it will take you months! If you could run it across 100 machines, you might
         be done in a few days.
      </p>
      
      <p class="noind">Distributed algorithms are great when you have a lot of work to do and want to speed up the time required to do it. MapReduce
         in particular is built up from two simple ideas: the <kbd class="calibre21">map</kbd> function and the <kbd class="calibre21">reduce</kbd> function.
      </p>
      
      
      
      <h4 id="ch11lev2sec2" class="calibre22"><a id="ch11lev2sec2__title" class="calibre4"/>The map function
      </h4>
      
      <p class="noind">The <kbd class="calibre21">map</kbd> function is simple: it takes an array and applies the same function to each item in the array. For example, here we’re doubling
         every item in the array:
      </p>
      
      <pre id="PLd0e13775" class="calibre5">&gt;&gt;&gt; arr1 = [1, 2, 3, 4, 5]
&gt;&gt;&gt; arr2 = map(lambda x: 2 * x, arr1)
[2, 4, 6, 8, 10]</pre>
      
      
      
      <p class="center1"><img src="Images/209fig01.jpg" alt="" class="calibre2" width="232" height="150"/></p>
      
      
      <p class="noind"><a id="iddle1047" class="calibre4"/><a id="iddle1262" class="calibre4"/><kbd class="calibre21">arr2</kbd> now contains<kbd class="calibre21">[2, 4, 6, 8, 10]</kbd>—every element in <kbd class="calibre21">arr1</kbd> was doubled! Doubling an element is pretty fast. But suppose you apply a function that takes more time to process. Look at
         this pseudocode:
      </p>
      
      <pre id="PLd0e13816" class="calibre5">&gt;&gt;&gt; arr1 = # A list of URLs
&gt;&gt;&gt; arr2 = map(download_page, arr1)</pre>
      
      <p class="noind">Here you have a list of URLs, and you want to download each page and store the contents in <kbd class="calibre21">arr2</kbd>. This could take a couple of seconds for each URL. If you had 1,000 URLs, this might take a couple of hours!
      </p>
      
      <p class="noind">Wouldn’t it be great if you had 100 machines, and <kbd class="calibre21">map</kbd> could automatically spread out the work across all of them? Then you would be downloading 100 pages at a time, and the work
         would go a lot faster! This is the idea behind the “map” in MapReduce.
      </p>
      
      
      
      <h4 id="ch11lev2sec3" class="calibre22"><a id="ch11lev2sec3__title" class="calibre4"/>The reduce function
      </h4>
      
      <p class="noind">The <kbd class="calibre21">reduce</kbd> function confuses people sometimes. The idea is that you “reduce” a whole list of items down to one item. With <kbd class="calibre21">map</kbd>, you go from one array to another.
      </p>
      
      
      
      <p class="center1"><img src="Images/210fig01.jpg" alt="" class="calibre2" width="232" height="150"/></p>
      
      
      <p class="noind">With <kbd class="calibre21">reduce</kbd>, you transform an array to a single item.
      </p>
      
      
      
      <p class="center1"><img src="Images/210fig02.jpg" alt="" class="calibre2" width="237" height="149"/></p>
      
      
      <p class="noind">Here’s an example:</p>
      
      <pre id="PLd0e13872" class="calibre5">&gt;&gt;&gt; arr1 = [1, 2, 3, 4, 5]
&gt;&gt;&gt; reduce(lambda x,y: x+y, arr1)
15</pre>
      
      <p class="noind"><a id="iddle1088" class="calibre4"/>In this case, you sum up all the elements in the array: <kbd class="calibre21">1 + 2 + 3 + 4 + 5 = 15!</kbd> I won’t explain <kbd class="calibre21">reduce</kbd> in more detail here, because there are plenty of tutorials online.
      </p>
      
      <p class="noind">MapReduce uses these two simple concepts to run queries about data across multiple machines. When you have a large dataset
         (billions of rows), MapReduce can give you an answer in minutes where a traditional database might take hours.
      </p>
      
      
      
      
      <h3 id="ch11lev1sec6" class="calibre13"><a id="ch11lev1sec6__title" class="calibre3"/>Bloom filters and HyperLogLog
      </h3>
      
      <p class="noind">Suppose you’re running Reddit. When someone posts a link, you want to see if it’s been posted before. Stories that haven’t
         been posted before are considered more valuable. So you need to figure out whether this link has been posted before.
      </p>
      
      <p class="noind">Or suppose you’re Google, and you’re crawling web pages. You only want to crawl a web page if you haven’t crawled it already.
         So you need to figure out whether this page has been crawled before.
      </p>
      
      <p class="noind">Or suppose you’re running bit.ly, which is a URL shortener. You don’t want to redirect users to malicious websites. You have
         a set of URLs that are considered malicious. Now you need to figure out whether you’re redirecting the user to a URL in that
         set.
      </p>
      
      <p class="noind">All of these examples have the same problem. You have a very large set.</p>
      
      
      
      <p class="center1"><img src="Images/211fig01.jpg" alt="" class="calibre2" width="439" height="362"/></p>
      
      
      <p class="noind"><a id="iddle1001" class="calibre4"/><a id="iddle1171" class="calibre4"/><a id="iddle1172" class="calibre4"/><a id="iddle1284" class="calibre4"/>Now you have a new item, and you want to see whether it belongs in that set. You could do this quickly with a hash. For example,
         suppose Google has a big hash in which the keys are all the pages it has crawled.
      </p>
      
      
      
      <p class="center1"><img src="Images/212fig01.jpg" alt="" class="calibre2" width="260" height="162"/></p>
      
      
      <p class="noind">You want to see whether you’ve already crawled adit.io. Look it up in the hash.</p>
      
      
      
      <p class="center1"><img src="Images/212fig02.jpg" alt="" class="calibre2" width="234" height="37"/></p>
      
      
      <p class="noind"><kbd class="calibre21">adit.io</kbd> is a key in the hash, so you’ve already crawled it. The average lookup time for hash tables is O(1). <kbd class="calibre21">adit.io</kbd> is in the hash, so you’ve already crawled it. You found that out in constant time. Pretty good!
      </p>
      
      <p class="noind">Except that this hash needs to be <i class="calibre6">huge</i>. Google indexes trillions of web pages. If this hash has all the URLs that Google has indexed, it will take up a lot of space.
         Reddit and bit.ly have the same space problem. When you have so much data, you need to get creative!
      </p>
      
      
      <h4 id="ch11lev2sec4" class="calibre22"><a id="ch11lev2sec4__title" class="calibre4"/>Bloom filters
      </h4>
      
      <p class="noind">Bloom filters offer a solution. Bloom filters are <i class="calibre6">probabilistic data structures</i>. They give you an answer that could be wrong but is probably correct. Instead of a hash, you can ask your bloom filter if
         you’ve crawled this URL before. A hash table would give you an accurate answer. A bloom filter will give you an answer that’s
         probably correct:
      </p>
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19">False positives are possible. Google might say, “You’ve already crawled this site,” even though you haven’t.
            
         </li>
         
         <li class="calibre19">False negatives aren’t possible. If the bloom filter says, “You haven’t crawled this site,” then you <i class="calibre6">definitely</i> haven’t crawled this site.
            
         </li>
         
      </ul>
      
      <p class="noind">Bloom filters are great because they take up very little space. A hash table would have to store every URL crawled by Google,
         but a bloom filter doesn’t have to do that. They’re great when you don’t need an exact answer, as in all of these examples.
         It’s okay for bit.ly to say, “We think this site might be malicious, so be extra careful.”
      </p>
      
      
      
      
      <h4 id="ch11lev2sec5" class="calibre22"><a id="ch11lev2sec5__title" class="calibre4"/>HyperLogLog
      </h4>
      
      <p class="noind"><a id="iddle1040" class="calibre4"/><a id="iddle1049" class="calibre4"/><a id="iddle1052" class="calibre4"/><a id="iddle1213" class="calibre4"/><a id="iddle1327" class="calibre4"/><a id="iddle1330" class="calibre4"/><a id="iddle1360" class="calibre4"/>Along the same lines is another algorithm called HyperLogLog. Suppose Google wants to count the number of <i class="calibre6">unique</i> searches performed by its users. Or suppose Amazon wants to count the number of unique items that users looked at today.
         Answering these questions takes a lot of space! With Google, you’d have to keep a log of all the unique searches. When a user
         searches for something, you have to see whether it’s already in the log. If not, you have to add it to the log. Even for a
         single day, this log would be massive!
      </p>
      
      <p class="noind">HyperLogLog approximates the number of unique elements in a set. Just like bloom filters, it won’t give you an exact answer,
         but it comes very close and uses only a fraction of the memory a task like this would otherwise take.
      </p>
      
      <p class="noind">If you have a lot of data and are satisfied with approximate answers, check out probabilistic algorithms!</p>
      
      
      
      
      <h3 id="ch11lev1sec7" class="calibre13"><a id="ch11lev1sec7__title" class="calibre3"/>The SHA algorithms
      </h3>
      
      <p class="noind">Do you remember hashing from <a href="kindle_split_011.xhtml#ch05" class="calibre4">chapter 5</a>? Just to recap, suppose you have a key, and you want to put the associated value in an array.
      </p>
      
      <p class="center1"><img src="Images/213fig01_alt.jpg" alt="" class="calibre2" width="590" height="39"/></p>
      
      <p class="noind">You use a hash function to tell you what slot to put the value in.</p>
      
      <p class="center1"><img src="Images/213fig02_alt.jpg" alt="" class="calibre2" width="590" height="89"/></p>
      
      <p class="noind">And you put the value in that slot.</p>
      
      
      
      <p class="center1"><img src="Images/213fig03.jpg" alt="" class="calibre2" width="247" height="111"/></p>
      
      
      <p class="noind"><a id="iddle1051" class="calibre4"/><a id="iddle1329" class="calibre4"/><a id="iddle1332" class="calibre4"/>This allows you to do constant-time lookups. When you want to know the value for a key, you can use the hash function again,
         and it will tell you in O(1) time what slot to check.
      </p>
      
      <p class="noind">In this case, you want the hash function to give you a good distribution. So a hash function takes a string and gives you
         back the slot number for that string.
      </p>
      
      
      <h4 id="ch11lev2sec6" class="calibre22"><a id="ch11lev2sec6__title" class="calibre4"/>Comparing files
      </h4>
      
      <p class="noind">Another hash function is a secure hash algorithm (SHA) function. Given a string, SHA gives you a hash for that string.</p>
      
      
      
      <p class="center1"><img src="Images/214fig01.jpg" alt="" class="calibre2" width="276" height="33"/></p>
      
      
      <p class="noind">The terminology can be a little confusing here. SHA is a <i class="calibre6">hash function</i>. It generates a <i class="calibre6">hash</i>, which is just a short string. The hash function for hash tables went from string to array index, whereas SHA goes from string
         to string.
      </p>
      
      <p class="noind">SHA generates a different hash for every string.</p>
      
      
      
      <p class="center1"><img src="Images/214fig02.jpg" alt="" class="calibre2" width="319" height="121"/></p>
      
      
      <table width="100%" border="1" cellspacing="5" class="calibre7">
         <colgroup class="calibre23">
            <col width="550" class="calibre9"/>
         </colgroup>
         <tbody class="calibre10">
            <tr class="calibre11">
               <td class="calibre24"/>
            </tr>
         </tbody>
      </table>
      <h5 id="ch11note01" class="notetitle">Note</h5>
      
      
      <p class="noindclose">SHA hashes are long. They’ve been truncated here.</p>
      
      <table width="100%" border="1" cellspacing="5" class="calibre7">
         <colgroup class="calibre23">
            <col width="550" class="calibre9"/>
         </colgroup>
         <tbody class="calibre10">
            <tr class="calibre11">
               <td class="calibre24"/>
            </tr>
         </tbody>
      </table>
      
      <p class="noind">You can use SHA to tell whether two files are the same. This is useful when you have very large files. Suppose you have a
         4 GB file. You want to check whether your friend has the same large file. You don’t have to try to email them your large file.
         Instead, you can both calculate the SHA hash and compare it.
      </p>
      
      
      
      
      <p class="center1"><img src="Images/215fig01.jpg" alt="" class="calibre2" width="439" height="360"/></p>
      
      
      
      
      <h4 id="ch11lev2sec7" class="calibre22"><a id="ch11lev2sec7__title" class="calibre4"/>Checking passwords
      </h4>
      
      <p class="noind"><a id="iddle1050" class="calibre4"/><a id="iddle1328" class="calibre4"/>SHA is also useful when you want to compare strings without revealing what the original string was. For example, suppose Gmail
         gets hacked, and the attacker steals all the passwords! Is your password out in the open? No, it isn’t. Google doesn’t store
         the original password, only the SHA hash of the password! When you type in your password, Google hashes it and checks it against
         the hash in its database.
      </p>
      
      <p class="center1"><img src="Images/215fig02_alt.jpg" alt="" class="calibre2" width="590" height="143"/></p>
      
      <p class="noind">So it’s only comparing hashes—it doesn’t have to store your password! SHA is used very commonly to hash passwords like this.
         It’s a one-way hash. You can get the hash of a string.
      </p>
      
      
      
      <p class="center1"><img src="Images/215fig03.jpg" alt="" class="calibre2" width="356" height="40"/></p>
      
      
      <p class="noind"><a id="iddle1253" class="calibre4"/><a id="iddle1336" class="calibre4"/>But you can’t get the original string from the hash.
      </p>
      
      
      
      <p class="center1"><img src="Images/216fig01.jpg" alt="" class="calibre2" width="238" height="46"/></p>
      
      
      <p class="noind">That means if an attacker gets the SHA hashes from Gmail, they can’t convert those hashes back to the original passwords!
         You can convert a password to a hash, but not vice versa.
      </p>
      
      <p class="noind">SHA is actually a family of algorithms: SHA-0, SHA-1, SHA-2, and SHA-3. As of this writing, SHA-0 and SHA-1 have some weaknesses.
         If you’re using an SHA algorithm for password hashing, use SHA-2 or SHA-3. The gold standard for password-hashing functions
         is currently bcrypt (though nothing is foolproof).
      </p>
      
      
      
      
      <h3 id="ch11lev1sec8" class="calibre13"><a id="ch11lev1sec8__title" class="calibre3"/>Locality-sensitive hashing
      </h3>
      
      <p class="noind">SHA has another important feature: it’s locality insensitive. Suppose you have a string, and you generate a hash for it.</p>
      
      
      
      <p class="center1"><img src="Images/216fig02.jpg" alt="" class="calibre2" width="219" height="45"/></p>
      
      
      <p class="noind">If you change just one character of the string and regenerate the hash, it’s totally different!</p>
      
      
      
      <p class="center1"><img src="Images/216fig03.jpg" alt="" class="calibre2" width="221" height="43"/></p>
      
      
      <p class="noind">This is good because an attacker can’t compare hashes to see whether they’re close to cracking a password.</p>
      
      <p class="noind">Sometimes, you want the opposite: you want a locality-sensitive hash function. That’s where <i class="calibre6">Simhash</i> comes in. If you make a small change to a string, Simhash generates a hash that’s only a little different. This allows you
         to compare hashes and see how similar two strings are, which is pretty useful!
      </p>
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19">Google uses Simhash to detect duplicates while crawling the web.
            
         </li>
         
         <li class="calibre19">A teacher could use Simhash to see whether a student was copying an essay from the web.
            
         </li>
         
         <li class="calibre19"><a id="iddle1123" class="calibre4"/><a id="iddle1337" class="calibre4"/>Scribd allows users to upload documents or books to share with others. But Scribd doesn’t want users uploading copyrighted
            content! The site could use Simhash to check whether an upload is similar to a Harry Potter book and, if so, reject it automatically.
            
         </li>
         
      </ul>
      
      <p class="noind">Simhash is useful when you want to check for similar items.</p>
      
      
      
      <h3 id="ch11lev1sec9" class="calibre13"><a id="ch11lev1sec9__title" class="calibre3"/>Diffie-Hellman key exchange
      </h3>
      
      <p class="noind">The <i class="calibre6">Diffie-Hellman algorithm</i> deserves a mention here, because it solves an age-old problem in an elegant way. How do you encrypt a message so it can only
         be read by the person you sent the message to?
      </p>
      
      <p class="noind">The easiest way is to come up with a cipher, like a = 1, b = 2, and so on. Then if I send you the message “4,15,7”, you can
         translate it to “d,o,g”. But for this to work, we both have to agree on the cipher. We can’t agree over email, because someone
         might hack into your email, figure out the cipher, and decode our messages. Heck, even if we meet in person, someone might
         guess the cipher—it’s not complicated. So we should change it every day. But then we have to meet in person to change it every
         day!
      </p>
      
      <p class="noind">Even if we did manage to change it every day, a simple cipher like this is easy to crack with a brute-force attack. Suppose
         I see the message “9,6,13,13,16 24,16,19,13,5”. I’ll guess that this uses a = 1, b = 2, and so on.
      </p>
      
      
      
      <p class="center1"><img src="Images/217fig01.jpg" alt="" class="calibre2" width="421" height="128"/></p>
      
      
      <p class="noind">That’s gibberish. Let’s try a = 2, b = 3, and so on.</p>
      
      
      
      <p class="center1"><img src="Images/217fig02.jpg" alt="" class="calibre2" width="419" height="126"/></p>
      
      
      <p class="noind"><a id="iddle1163" class="calibre4"/><a id="iddle1241" class="calibre4"/><a id="iddle1283" class="calibre4"/><a id="iddle1288" class="calibre4"/>That worked! A simple cipher like this is easy to break. The Germans used a much more complicated cipher in WWII, but it was
         still cracked. Diffie-Hellman solves both problems:
      </p>
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19">Both parties don’t need to know the cipher. So we don’t have to meet and agree to what the cipher should be.
            
         </li>
         
         <li class="calibre19">The encrypted messages are <i class="calibre6">extremely</i> hard to decode.
            
         </li>
         
      </ul>
      
      <p class="noind">Diffie-Hellman has two keys: a public key and a private key. The public key is exactly that: public. You can post it on your
         website, email it to friends, or do anything you want with it. You don’t have to hide it. When someone wants to send you a
         message, they encrypt it using the public key. An encrypted message can only be decrypted using the private key. As long as
         you’re the only person with the private key, only you will be able to decrypt this message!
      </p>
      
      <p class="noind">The Diffie-Hellman algorithm is still used in practice, along with its successor, RSA. If you’re interested in cryptography,
         Diffie-Hellman is a good place to start: it’s elegant and not too hard to follow.
      </p>
      
      
      
      <h3 id="ch11lev1sec10" class="calibre13"><a id="ch11lev1sec10__title" class="calibre3"/>Linear programming
      </h3>
      
      <p class="noind">I saved the best for last. Linear programming is one of the coolest things I know.</p>
      
      <p class="noind">Linear programming is used to maximize something given some constraints. For example, suppose your company makes two products,
         shirts and totes. Shirts need 1 meter of fabric and 5 buttons. Totes need 2 meters of fabric and 2 buttons. You have 11 meters
         of fabric and 20 buttons. You make $2 per shirt and $3 per tote. How many shirts and totes should you make to maximize your
         profit?
      </p>
      
      <p class="noind">Here you’re trying to maximize profit, and you’re constrained by the amount of materials you have.</p>
      
      <p class="noind">Another example: you’re a politician, and you want to maximize the number of votes you get. Your research has shown that it
         takes an average of an hour of work (marketing, research, and so on) for each vote from a San Franciscan or 1.5 hours/vote
         from a Chicagoan. You need at least 500 San Franciscans and at least 300 Chicagoans. You have 50 days. It also costs you $2/San
         Franciscan versus $1/Chicagoan. Your total budget is $1,500. What’s the maximum number of total votes you can get (San Francisco
         + Chicago)?
      </p>
      
      <p class="noind">Here you’re trying to maximize votes, and you’re constrained by time and money.</p>
      
      <p class="noind">You might be thinking, “You’ve talked about a lot of optimization topics in this book. How are they related to linear programming?”
         All the graph algorithms can be done through linear programming instead. Linear programming is a much more general framework,
         and graph problems are a subset of that. I hope your mind is blown!
      </p>
      
      <p class="noind">Linear programming uses the Simplex algorithm. It’s a complex algorithm, which is why I didn’t include it in this book. If
         you’re interested in optimization, look up linear programming!
      </p>
      
      
      
      <h3 id="ch11lev1sec11" class="calibre13"><a id="ch11lev1sec11__title" class="calibre3"/>Epilogue
      </h3>
      
      <p class="noind">I hope this quick tour of 10 algorithms showed you how much more is left to discover. I think the best way to learn is to
         find something you’re interested in and dive in. This book gave you a solid foundation to do just that.
      </p>
      
      
      </div>



  </body>
</html>