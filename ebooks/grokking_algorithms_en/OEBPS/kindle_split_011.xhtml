<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style02.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style03.css" rel="stylesheet" type="text/css" />
<style type="text/css" title="ibis-book">
    #sbo-rt-content .calibre{display:block;font-size:1em;margin-bottom:0;margin-left:5pt;margin-right:5pt;margin-top:0;padding-left:0;padding-right:0}#sbo-rt-content .calibre1{display:block;font-size:2em;font-weight:bold;line-height:1.2;margin-bottom:.67em;margin-left:0;margin-right:0;margin-top:.67em;text-align:center}#sbo-rt-content .calibre10{display:table-row-group;vertical-align:middle}#sbo-rt-content .calibre11{display:table-row;vertical-align:inherit}#sbo-rt-content .calibre12{display:block;font-family:"Liberation Mono",monospace;font-size:.77778em;margin-bottom:1em;margin-left:5px;margin-right:0;margin-top:1em;white-space:pre-wrap}#sbo-rt-content .calibre13{display:block;font-size:1.125em;font-weight:bold;line-height:1.2;margin-bottom:0;margin-left:0;margin-right:0;margin-top:40px}#sbo-rt-content .calibre14{display:block}#sbo-rt-content .calibre15{display:block;margin-bottom:1em;margin-left:1em;margin-right:1em;margin-top:1em}#sbo-rt-content .calibre16{display:block}#sbo-rt-content .calibre17{display:block;margin-bottom:1em;margin-left:0;margin-right:0;margin-top:1em}#sbo-rt-content .calibre18{display:block;list-style-type:disc;margin-bottom:1em;margin-right:0;margin-top:1em}#sbo-rt-content .calibre19{display:list-item}#sbo-rt-content .calibre2{height:auto;width:auto}#sbo-rt-content .calibre20{font-weight:bold}#sbo-rt-content .calibre21{font-family:"Liberation Mono",monospace}#sbo-rt-content .calibre22{display:block;font-weight:bold;margin-bottom:0;margin-left:0;margin-right:0;margin-top:30px}#sbo-rt-content .calibre23{display:table-column-group}#sbo-rt-content .calibre24{display:table-cell;padding-bottom:1px;padding-left:1px;padding-right:1px;padding-top:1px;text-align:inherit;vertical-align:inherit}#sbo-rt-content .calibre25{font-size:.75em;line-height:normal;vertical-align:sub}#sbo-rt-content .calibre26{font-size:.75em;line-height:normal;vertical-align:super}#sbo-rt-content .calibre27{display:block;list-style-type:decimal;margin-bottom:1em;margin-right:0;margin-top:1em}#sbo-rt-content .calibre28{font-size:smaller;line-height:normal;vertical-align:super}#sbo-rt-content .calibre29{font-size:.75em}#sbo-rt-content .calibre3{font-family:"Times";line-height:1.2}#sbo-rt-content .calibre30{font-size:.77778em;line-height:normal;vertical-align:super}#sbo-rt-content .calibre31{font-size:.71429em}#sbo-rt-content .calibre4{font-family:"Times"}#sbo-rt-content .calibre5{display:block;font-family:"Liberation Mono",monospace;font-size:.75em;margin-bottom:1em;margin-left:5px;margin-right:0;margin-top:1em;white-space:pre-wrap}#sbo-rt-content .calibre6{font-style:italic}#sbo-rt-content .calibre7{border-collapse:separate;border-spacing:2px;display:table;margin-bottom:0;margin-top:0;text-indent:0}#sbo-rt-content .calibre8{display:table-column-group;text-align:left}#sbo-rt-content .calibre9{display:table-column}#sbo-rt-content .center{display:block;font-weight:bold;margin-bottom:0;margin-left:0;margin-right:0;margin-top:30px;text-align:center}#sbo-rt-content .center1{display:block;margin-bottom:1em;margin-left:0;margin-right:0;margin-top:1em;text-align:center}#sbo-rt-content .docTableCell{display:table-cell;font-size:.75em;padding-bottom:1px;padding-left:1px;padding-right:1px;padding-top:1px;text-align:left;vertical-align:inherit}#sbo-rt-content .ind{display:block;margin-bottom:8px;margin-right:0;margin-top:0;text-align:left;text-indent:0}#sbo-rt-content .noind{display:block;margin-bottom:1em;margin-left:0;margin-right:0;margin-top:25px;text-indent:0}#sbo-rt-content .noindclose{display:block;margin-bottom:1em;margin-left:0;margin-right:0;margin-top:1em;text-indent:0}#sbo-rt-content .notetitle{display:block;font-size:.75em;font-weight:bold;margin-bottom:0;margin-left:0;margin-right:0;margin-top:2px}#sbo-rt-content .part{display:block;font-size:1.41667em;font-weight:bold;line-height:1.2;margin-bottom:0;margin-left:0;margin-right:0;margin-top:.83em}#sbo-rt-content .smaller{display:block;font-size:.75em;margin-bottom:1em;margin-left:1em;margin-right:1em;margin-top:1em}#sbo-rt-content .toc{display:block;margin-bottom:1em;margin-left:15px;margin-right:1em;margin-top:15px;text-indent:0}
    </style>
<style type="text/css" title="ibis-book">
    @page{margin-bottom:5pt;margin-top:5pt}
    </style>
<style type="text/css" id="font-styles">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }</style>
<style type="text/css" id="font-family">#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }</style>
<style type="text/css" id="column-width">#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }</style>

<style type="text/css">body{margin:1em;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}body{background-color:transparent!important;}#sbo-rt-content *{word-wrap:break-word!important;word-break:break-word!important;}#sbo-rt-content table,#sbo-rt-content pre{overflow-x:unset!important;overflow:unset!important;overflow-y:unset!important;white-space:pre-wrap!important;}</style></head>
<body><div id="sbo-rt-content" class="calibre"><h2 id="ch05" class="part">Chapter 5. <a id="ch05__title" class="calibre3"/>Hash Tables
      </h2>
      
      
      
      <p class="center1"><img src="Images/common.jpg" alt="" class="calibre2" width="134" height="148"/></p>
      
      
      <p class="noind"><a id="iddle1201" class="calibre4"/><b class="calibre20">In this chapter</b></p>
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19">You learn about hash tables, one of the most useful basic data structures. Hash tables have many uses; this chapter covers
            the common use cases.
            
         </li>
         
         <li class="calibre19">You learn about the internals of hash tables: implementation, collisions, and hash functions. This will help you understand
            how to analyze a hash table’s performance.
            
         </li>
         
      </ul>
      
      <p class="noind">Suppose you work at a grocery store. When a customer buys produce, you have to look up the price in a book. If the book is
         unalphabetized, it can take you a long time to look through every single line for <i class="calibre6">apple</i>. You’d be doing simple search from <a href="kindle_split_007.xhtml#ch01" class="calibre4">chapter 1</a>, where you have to look at every line. Do you remember how long that would take? O(<i class="calibre6">n</i>) time. If the book is alphabetized, you could run binary search to find the price of an apple. That would only take O(log
         <i class="calibre6">n</i>) time.
      </p>
      
      
      
      <p class="center1"><img src="Images/073fig01.jpg" alt="" class="calibre2" width="210" height="225"/></p>
      
      
      
      
      
      <p class="center1"><img src="Images/074fig01.jpg" alt="" class="calibre2" width="409" height="352"/></p>
      
      
      <p class="noind">As a reminder, there’s a big difference between O(<i class="calibre6">n</i>) and O(log <i class="calibre6">n</i>) time! Suppose you could look through 10 lines of the book per second. Here’s how long simple search and binary search would
         take you.
      </p>
      
      
      
      <p class="center1"><img src="Images/074fig02.jpg" alt="" class="calibre2" width="500" height="221"/></p>
      
      
      <p class="noind">You already know that binary search is darn fast. But as a cashier, looking things up in a book is a pain, even if the book
         is sorted. You can feel the customer steaming up as you search for items in the book. What you really need is a buddy who
         has all the names and prices memorized. Then you don’t need to look up anything: you ask her, and she tells you the answer
         instantly.
      </p>
      
      
      
      
      <p class="center1"><img src="Images/075fig01.jpg" alt="" class="calibre2" width="350" height="274"/></p>
      
      
      <p class="noind">Your buddy Maggie can give you the price in O(1) time for any item, no matter how big the book is. She’s even faster than
         binary search.
      </p>
      
      
      
      <p class="center1"><img src="Images/075fig02.jpg" alt="" class="calibre2" width="443" height="234"/></p>
      
      
      <p class="noind">What a wonderful person! How do you get a “Maggie”?</p>
      
      <p class="noind">Let’s put on our data structure hats. You know two data structures so far: arrays and lists (I won’t talk about stacks because
         you can’t really “search” for something in a stack). You could implement this book as an array.
      </p>
      
      
      
      <p class="center1"><img src="Images/075fig03.jpg" alt="" class="calibre2" width="432" height="65"/></p>
      
      
      <p class="noind">Each item in the array is really two items: one is the name of a kind of produce, and the other is the price. If you sort
         this array by name, you can run binary search on it to find the price of an item. So you can find items in O(log <i class="calibre6">n</i>) time. But you want to find items in O(1) time. That is, you want to make a “Maggie.” That’s where hash functions come in.
      </p>
      
      
      
      <h3 id="ch05lev1sec1" class="calibre13"><a id="ch05lev1sec1__title" class="calibre3"/>Hash functions
      </h3>
      
      <p class="noind"><a id="iddle1203" class="calibre4"/><a id="iddle1352" class="calibre4"/>A hash function is a function where you put in a string<sup class="calibre26">[<a href="#ch05fn01" class="calibre4">1</a>]</sup> and you get back a number.
      </p>
      <blockquote class="smaller">
         <p class="calibre17"><sup class="calibre28"><a id="ch05fn01" class="calibre4">1</a></sup> 
            </p><div class="calibre14"><b class="calibre20"><i class="calibre6">String</i> here means any kind of data—a sequence of bytes.</b></div>
         <p class="calibre17"/>
      </blockquote>
      
      
      
      <p class="center1"><img src="Images/076fig01.jpg" alt="" class="calibre2" width="337" height="248"/></p>
      
      
      <p class="noind">In technical terminology, we’d say that a hash function “maps strings to numbers.” You might think there’s no discernable
         pattern to what number you get out when you put a string in. But there are some requirements for a hash function:
      </p>
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19">It needs to be consistent. For example, suppose you put in “apple” and get back “4”. Every time you put in “apple”, you should
            get “4” back. Without this, your hash table won’t work.
            
         </li>
         
         <li class="calibre19">It should map different words to different numbers. For example, a hash function is no good if it always returns “1” for any
            word you put in. In the best case, every different word should map to a different number.
            
         </li>
         
      </ul>
      
      <p class="noind">So a hash function maps strings to numbers. What is that good for? Well, you can use it to make your “Maggie”!</p>
      
      <p class="noind">Start with an empty array:</p>
      
      
      
      <p class="center1"><img src="Images/076fig02.jpg" alt="" class="calibre2" width="241" height="85"/></p>
      
      
      <p class="noind">You’ll store all of your prices in this array. Let’s add the price of an apple. Feed “apple” into the hash function.</p>
      
      
      
      
      <p class="center1"><img src="Images/077fig01.jpg" alt="" class="calibre2" width="364" height="77"/></p>
      
      
      <p class="noind">The hash function outputs “3”. So let’s store the price of an apple at index 3 in the array.</p>
      
      
      
      <p class="center1"><img src="Images/077fig02.jpg" alt="" class="calibre2" width="259" height="134"/></p>
      
      
      <p class="noind">Let’s add milk. Feed “milk” into the hash function.</p>
      
      
      
      <p class="center1"><img src="Images/077fig03.jpg" alt="" class="calibre2" width="371" height="67"/></p>
      
      
      <p class="noind">The hash function says “0”. Let’s store the price of milk at index 0.</p>
      
      
      
      <p class="center1"><img src="Images/077fig04.jpg" alt="" class="calibre2" width="308" height="154"/></p>
      
      
      <p class="noind">Keep going, and eventually the whole array will be full of prices.</p>
      
      
      
      <p class="center1"><img src="Images/077fig05.jpg" alt="" class="calibre2" width="335" height="70"/></p>
      
      
      <p class="noind">Now you ask, “Hey, what’s the price of an avocado?” You don’t need to search for it in the array. Just feed “avocado” into
         the hash function.
      </p>
      
      
      
      <p class="center1"><img src="Images/077fig06.jpg" alt="" class="calibre2" width="421" height="74"/></p>
      
      
      <p class="noind">It tells you that the price is stored at index 4. And sure enough, there it is.</p>
      
      
      
      <p class="center1"><img src="Images/077fig07.jpg" alt="" class="calibre2" width="445" height="165"/></p>
      
      
      <p class="noind"><a id="iddle1122" class="calibre4"/>The hash function tells you exactly where the price is stored, so you don’t have to search at all! This works because
      </p>
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19">The hash function consistently maps a name to the same index. Every time you put in “avocado”, you’ll get the same number
            back. So you can use it the first time to find where to store the price of an avocado, and then you can use it to find where
            you stored that price.
            
         </li>
         
         <li class="calibre19">The hash function maps different strings to different indexes. “Avocado” maps to index 4. “Milk” maps to index 0. Everything
            maps to a different slot in the array where you can store its price.
            
         </li>
         
         <li class="calibre19">The hash function knows how big your array is and only returns valid indexes. So if your array is 5 items, the hash function
            doesn’t return 100 ... that wouldn’t be a valid index in the array.
            
         </li>
         
      </ul>
      
      <p class="noind">You just built a “Maggie”! Put a hash function and an array together, and you get a data structure called a <i class="calibre6">hash table</i>. A hash table is the first data structure you’ll learn that has some extra logic behind it. Arrays and lists map straight
         to memory, but hash tables are smarter. They use a hash function to intelligently figure out where to store elements.
      </p>
      
      <p class="noind">Hash tables are probably the most useful complex data structure you’ll learn. They’re also known as hash maps, maps, dictionaries,
         and associative arrays. And hash tables are fast! Remember our discussion of arrays and linked lists back in <a href="kindle_split_008.xhtml#ch02" class="calibre4">chapter 2</a>? You can get an item from an array instantly. And hash tables use an array to store the data, so they’re equally fast.
      </p>
      
      <p class="noind">You’ll probably never have to implement hash tables yourself. Any good language will have an implementation for hash tables.
         Python has hash tables; they’re called <i class="calibre6">dictionaries</i>. You can make a new hash table using the <kbd class="calibre21">dict</kbd> function:
      </p>
      
      <pre id="PLd0e5434" class="calibre5">&gt;&gt;&gt; book = dict()</pre>
      
      
      
      <p class="center1"><img src="Images/078fig01.jpg" alt="" class="calibre2" width="107" height="121"/></p>
      
      
      <p class="noind"><kbd class="calibre21">book</kbd> is a new hash table. Let’s add some prices to <kbd class="calibre21">book</kbd>:
      </p>
      
      <p class="center1"><img src="Images/078fig02_alt.jpg" alt="" class="calibre2" width="590" height="113"/></p>
      
      
      
      <p class="center1"><img src="Images/078fig03.jpg" alt="" class="calibre2" width="194" height="236"/></p>
      
      
      <p class="noind"><a id="iddle1208" class="calibre4"/><a id="iddle1211" class="calibre4"/><a id="iddle1259" class="calibre4"/>Pretty easy! Now let’s ask for the price of an avocado:
      </p>
      
      
      
      <p class="center1"><img src="Images/079fig01.jpg" alt="" class="calibre2" width="371" height="42"/></p>
      
      
      <p class="noind">A hash table has keys and values. In the <kbd class="calibre21">book</kbd> hash, the names of produce are the keys, and their prices are the values. A hash table maps keys to values.
      </p>
      
      <p class="noind">In the next section, you’ll see some examples where hash tables are really useful.</p>
      
      
      
      <h3 id="ch05lev1sec2" class="calibre13"><a id="ch05lev1sec2__title" class="calibre3"/>Exercises
      </h3>
      
      <p class="noind">It’s important for hash functions to consistently return the same output for the same input. If they don’t, you won’t be able
         to find your item after you put it in the hash table!
      </p>
      
      <p class="noind">Which of these hash functions are consistent?</p>
      
      <p class="calibre17"><a id="ch05qa1" class="calibre4"/></p>
      <blockquote class="calibre15">
         <p class="calibre17"><a id="ch05qa1qe1" class="calibre4"/></p>
         <p class="calibre17"><a id="ch05qa1q1" class="calibre4"/><b class="calibre20">5.1 </b></p><p class="noind">
               
               <img src="Images/079fig02.jpg" alt="" class="calibre2" width="398" height="19"/>
               
            </p>
            
         <p class="calibre17"/>
      </blockquote>
      <blockquote class="calibre15">
         <p class="calibre17"><a id="ch05qa1qe2" class="calibre4"/></p>
         <p class="calibre17"><a id="ch05qa1q2" class="calibre4"/><b class="calibre20">5.2 </b></p><p class="noind"><img src="Images/079fig03_alt.jpg" alt="" class="calibre2" width="573" height="19"/></p>
            
         <p class="calibre17"/>
      </blockquote>
      <blockquote class="calibre15">
         <p class="calibre17"><a id="ch05qa1qe3" class="calibre4"/></p>
         <p class="calibre17"><a id="ch05qa1q3" class="calibre4"/><b class="calibre20">5.3 </b></p><p class="noind"><img src="Images/079fig04_alt.jpg" alt="" class="calibre2" width="590" height="38"/></p>
            
         <p class="calibre17"/>
      </blockquote>
      <blockquote class="calibre15">
         <p class="calibre17"><a id="ch05qa1qe4" class="calibre4"/></p>
         <p class="calibre17"><a id="ch05qa1q4" class="calibre4"/><b class="calibre20">5.4 </b></p><p class="noind">
               
               <img src="Images/079fig05.jpg" alt="" class="calibre2" width="422" height="41"/>
               
            </p>
            
         <p class="calibre17"/>
      </blockquote>
      
      
      
      <p class="center1"><img src="Images/079fig06.jpg" alt="" class="calibre2" width="246" height="202"/></p>
      
      
      
      
      <h3 id="ch05lev1sec3" class="calibre13"><a id="ch05lev1sec3__title" class="calibre3"/>Use cases
      </h3>
      
      <p class="noind">Hash tables are used everywhere. This section will show you a few use cases.</p>
      
      
      <h4 id="ch05lev2sec1" class="calibre22"><a id="ch05lev2sec1__title" class="calibre4"/>Using hash tables for lookups
      </h4>
      
      <p class="noind">Your phone has a handy phonebook built in.</p>
      
      <p class="noind">Each name has a phone number associated with it.</p>
      
      
      
      <p class="center1"><img src="Images/079fig07.jpg" alt="" class="calibre2" width="466" height="128"/></p>
      
      
      
      
      <p class="center1"><img src="Images/079fig08.jpg" alt="" class="calibre2" width="208" height="291"/></p>
      
      
      <p class="noind">Suppose you want to build a phone book like this. You’re mapping people’s names to phone numbers. Your phone book needs to
         have this functionality:
      </p>
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19">Add a person’s name and the phone number associated with that person.
            
         </li>
         
         <li class="calibre19">Enter a person’s name, and get the phone number associated with that name.
            
         </li>
         
      </ul>
      
      <p class="noind">This is a perfect use case for hash tables! Hash tables are great when you want to</p>
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19">Create a mapping from one thing to another thing
            
         </li>
         
         <li class="calibre19">Look something up
            
         </li>
         
      </ul>
      
      <p class="noind">Building a phone book is pretty easy. First, make a new hash table:</p>
      
      <pre id="PLd0e5653" class="calibre5">&gt;&gt;&gt; phone_book = dict()</pre>
      
      <p class="noind">By the way, Python has a shortcut for making a new hash table. You can use two curly braces:</p>
      
      <p class="center1"><img src="Images/080fig01_alt.jpg" alt="" class="calibre2" width="590" height="17"/></p>
      
      <p class="noind">Let’s add the phone numbers of some people into this phone book:</p>
      
      <pre id="PLd0e5670" class="calibre5">&gt;&gt;&gt; phone_book["jenny"] = 8675309
&gt;&gt;&gt; phone_book["emergency"] = 911</pre>
      
      <p class="noind">That’s all there is to it! Now, suppose you want to find Jenny’s phone number. Just pass the key in to the hash:</p>
      
      
      
      <p class="center1"><img src="Images/080fig02.jpg" alt="" class="calibre2" width="418" height="52"/></p>
      
      
      
      
      <p class="center1"><img src="Images/080fig03.jpg" alt="" class="calibre2" width="245" height="218"/></p>
      
      
      <p class="noind">Imagine if you had to do this using an array instead. How would you do it? Hash tables make it easy to model a relationship
         from one item to another.
      </p>
      
      <p class="noind">Hash tables are used for lookups on a much larger scale. For example, suppose you go to a website like <a href="http://adit.io" class="calibre4">http://adit.io</a>. Your computer has to translate adit.io to an IP address.
      </p>
      
      
      
      <p class="center1"><img src="Images/080fig04.jpg" alt="" class="calibre2" width="412" height="41"/></p>
      
      
      <p class="noind"><a id="iddle1134" class="calibre4"/><a id="iddle1136" class="calibre4"/><a id="iddle1209" class="calibre4"/><a id="iddle1218" class="calibre4"/>For any website you go to, the address has to be translated to an IP address.
      </p>
      
      
      
      <p class="center1"><img src="Images/081fig01.jpg" alt="" class="calibre2" width="392" height="108"/></p>
      
      
      <p class="noind">Wow, mapping a web address to an IP address? Sounds like a perfect use case for hash tables! This process is called <i class="calibre6">DNS resolution</i>. Hash tables are one way to provide this functionality.
      </p>
      
      
      
      <h4 id="ch05lev2sec2" class="calibre22"><a id="ch05lev2sec2__title" class="calibre4"/>Preventing duplicate entries
      </h4>
      
      
      
      <p class="center1"><img src="Images/081fig02.jpg" alt="" class="calibre2" width="191" height="275"/></p>
      
      
      <p class="noind">Suppose you’re running a voting booth. Naturally, every person can vote just once. How do you make sure they haven’t voted
         before? When someone comes in to vote, you ask for their full name. Then you check it against the list of people who have
         voted.
      </p>
      
      
      
      <p class="center1"><img src="Images/081fig03.jpg" alt="" class="calibre2" width="163" height="175"/></p>
      
      
      <p class="noind">If their name is on the list, this person has already voted—kick them out! Otherwise, you add their name to the list and let
         them vote. Now suppose a lot of people have come in to vote, and the list of people who have voted is really long.
      </p>
      
      
      
      <p class="center1"><img src="Images/081fig04.jpg" alt="" class="calibre2" width="177" height="269"/></p>
      
      
      <p class="noind">Each time someone new comes in to vote, you have to scan this giant list to see if they’ve already voted. But there’s a better
         way: use a hash!
      </p>
      
      <p class="noind">First, make a hash to keep track of the people who have voted:</p>
      
      <pre id="PLd0e5792" class="calibre5">&gt;&gt;&gt; voted = {}</pre>
      
      <p class="noind">When someone new comes in to vote, check if they’re already in the hash:</p>
      
      <pre id="PLd0e5801" class="calibre5">&gt;&gt;&gt; value = voted.get("tom")</pre>
      
      <p class="noind">The <kbd class="calibre21">get</kbd> function returns the value if “tom” is in the hash table. Otherwise, it returns <kbd class="calibre21">None</kbd>. You can use this to check if someone has already voted!
      </p>
      
      
      
      <p class="center1"><img src="Images/082fig01.jpg" alt="" class="calibre2" width="350" height="434"/></p>
      
      
      <p class="noind">Here’s the code:</p>
      
      <pre id="PLd0e5826" class="calibre5">voted = {}

<b class="calibre20">def</b> check_voter(name):
  <b class="calibre20">if</b> voted.get(name):
    print "kick them out!"
  <b class="calibre20">else:</b>
    voted[name] = True
    print "let them vote!"</pre>
      
      <p class="noind">Let’s test it a few times:</p>
      
      <pre id="PLd0e5844" class="calibre5">&gt;&gt;&gt; check_voter("tom")
let them vote!
&gt;&gt;&gt; check_voter("mike")
let them vote!
&gt;&gt;&gt; check_voter("mike")
kick them out!</pre>
      
      <p class="noind">The first time Tom goes in, this will print, “let them vote!” Then Mike goes in, and it prints, “let them vote!” Then Mike
         tries to go a second time, and it prints, “kick them out!”
      </p>
      
      <p class="noind"><a id="iddle1103" class="calibre4"/><a id="iddle1210" class="calibre4"/>Remember, if you were storing these names in a list of people who have voted, this function would eventually become really
         slow, because it would have to run a simple search over the entire list. But you’re storing their names in a hash table instead,
         and a hash table instantly tells you whether this person’s name is in the hash table or not. Checking for duplicates is very
         fast with a hash table.
      </p>
      
      
      
      <h4 id="ch05lev2sec3" class="calibre22"><a id="ch05lev2sec3__title" class="calibre4"/>Using hash tables as a cache
      </h4>
      
      
      
      <p class="center1"><img src="Images/083fig01.jpg" alt="" class="calibre2" width="238" height="181"/></p>
      
      
      <p class="noind">One final use case: caching. If you work on a website, you may have heard of caching before as a good thing to do. Here’s
         the idea. Suppose you visit facebook.com:
      </p>
      
      <p class="calibre17"/>
      <ol class="calibre27">
         
         <li class="calibre19">You make a request to Facebook’s server.
            
         </li>
         
         <li class="calibre19">The server thinks for a second and comes up with the web page to send to you.
            
         </li>
         
         <li class="calibre19">You get a web page.
            
         </li>
         
      </ol>
      
      <p class="center1"><img src="Images/083fig02_alt.jpg" alt="" class="calibre2" width="590" height="206"/></p>
      
      <p class="noind">For example, on Facebook, the server may be collecting all of your friends’ activity to show you. It takes a couple of seconds
         to collect all that activity and shows it to you. That couple of seconds can feel like a long time as a user. You might think,
         “Why is Facebook being so slow?” On the other hand, Facebook’s servers have to serve millions of people, and that couple of
         seconds adds up for them. Facebook’s servers are really working hard to serve all of those websites. Is there a way to make
         Facebook faster and have its servers do less work at the same time?
      </p>
      
      <p class="noind">Suppose you have a niece who keeps asking you about planets. “How far is Mars from Earth?” “How far is the Moon?” “How far
         is Jupiter?” Each time, you have to do a Google search and give her an answer. It takes a couple of minutes. Now, suppose
         she always asked, “How far is the Moon?” Pretty soon, you’d memorize that the Moon is 238,900 miles away. You wouldn’t have
         to look it up on Google ... you’d just remember and answer. This is how caching works: websites remember the data instead
         of recalculating it.
      </p>
      
      <p class="noind">If you’re logged in to Facebook, all the content you see is tailored just for you. Each time you go to facebook.com, its servers
         have to think about what content you’re interested in. But if you’re not logged in to Facebook, you see the login page. Everyone
         sees the same login page. Facebook is asked the same thing over and over: “Give me the home page when I’m logged out.” So
         it stops making the server do work to figure out what the home page looks like. Instead, it memorizes what the home page looks
         like and sends it to you.
      </p>
      
      <p class="center1"><img src="Images/084fig01_alt.jpg" alt="" class="calibre2" width="572" height="358"/></p>
      
      <p class="noind">This is called <i class="calibre6">caching</i>. It has two advantages:
      </p>
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19">You get the web page a lot faster, just like when you memorized the distance from Earth to the Moon. The next time your niece
            asks you, you won’t have to Google it. You can answer instantly.
            
         </li>
         
         <li class="calibre19">Facebook has to do less work.
            
         </li>
         
      </ul>
      
      <p class="noind">Caching is a common way to make things faster. All big websites use caching. And that data is cached in a hash!</p>
      
      <p class="noind">Facebook isn’t just caching the home page. It’s also caching the About page, the Contact page, the Terms and Conditions page,
         and a lot more. So it needs a mapping from page URL to page data.
      </p>
      
      
      
      <p class="center1"><img src="Images/085fig01.jpg" alt="" class="calibre2" width="500" height="78"/></p>
      
      
      <p class="noind">When you visit a page on Facebook, it first checks whether the page is stored in the hash.</p>
      
      
      
      <p class="center1"><img src="Images/085fig02.jpg" alt="" class="calibre2" width="439" height="372"/></p>
      
      
      <p class="noind">Here it is in code:</p>
      
      <p class="center1"><img src="Images/085fig03_alt.jpg" alt="" class="calibre2" width="590" height="167"/></p>
      
      <p class="noind">Here, you make the server do work only if the URL isn’t in the cache. Before you return the data, though, you save it in the
         cache. The next time someone requests this URL, you can send the data from the cache instead of making the server do the work.
      </p>
      
      
      
      
      <h4 id="ch05lev2sec4" class="calibre22"><a id="ch05lev2sec4__title" class="calibre4"/>Recap
      </h4>
      
      <p class="noind"><a id="iddle1202" class="calibre4"/>To recap, hashes are good for
      </p>
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19">Modeling relationships from one thing to another thing
            
         </li>
         
         <li class="calibre19">Filtering out duplicates
            
         </li>
         
         <li class="calibre19">Caching/memorizing data instead of making your server do work
            
         </li>
         
      </ul>
      
      
      
      
      <h3 id="ch05lev1sec4" class="calibre13"><a id="ch05lev1sec4__title" class="calibre3"/>Collisions
      </h3>
      
      <p class="noind">Like I said earlier, most languages have hash tables. You don’t need to know how to write your own. So, I won’t talk about
         the internals of hash tables too much. But you still care about performance! To understand the performance of hash tables,
         you first need to understand what collisions are. The next two sections cover collisions and performance.
      </p>
      
      <p class="noind">First, I’ve been telling you a white lie. I told you that a hash function always maps different keys to different slots in
         the array.
      </p>
      
      
      
      <p class="center1"><img src="Images/086fig01.jpg" alt="" class="calibre2" width="500" height="307"/></p>
      
      
      <p class="noind">In reality, it’s almost impossible to write a hash function that does this. Let’s take a simple example. Suppose your array
         contains 26 slots.
      </p>
      
      <p class="center1"><img src="Images/086fig02_alt.jpg" alt="" class="calibre2" width="590" height="50"/></p>
      
      <p class="noind">And your hash function is really simple: it assigns a spot in the array alphabetically.</p>
      
      
      <p class="center1"><img src="Images/087fig01_alt.jpg" alt="" class="calibre2" width="590" height="88"/></p>
      
      
      
      <p class="center1"><img src="Images/087fig02.jpg" alt="" class="calibre2" width="196" height="88"/></p>
      
      
      <p class="noind">Maybe you can already see the problem. You want to put the price of apples in your hash. You get assigned the first slot.</p>
      
      <p class="noind">Then you want to put the price of bananas in the hash. You get assigned the second slot.</p>
      
      
      
      <p class="center1"><img src="Images/087fig03.jpg" alt="" class="calibre2" width="314" height="88"/></p>
      
      
      <p class="noind">Everything is going so well! But now you want to put the price of avocados in your hash. You get assigned the first slot again.</p>
      
      
      
      <p class="center1"><img src="Images/087fig04.jpg" alt="" class="calibre2" width="361" height="110"/></p>
      
      
      <p class="noind">Oh no! Apples have that slot already! What to do? This is called a <i class="calibre6">collision</i>: two keys have been assigned the same slot. This is a problem. If you store the price of avocados at that slot, you’ll overwrite
         the price of apples. Then the next time someone asks for the price of apples, they will get the price of avocados instead!
         Collisions are bad, and you need to work around them. There are many different ways to deal with collisions. The simplest
         one is this: if multiple keys map to the same slot, start a linked list at that slot.
      </p>
      
      
      
      <p class="center1"><img src="Images/087fig05.jpg" alt="" class="calibre2" width="500" height="161"/></p>
      
      
      <p class="noind"><a id="iddle1113" class="calibre4"/><a id="iddle1204" class="calibre4"/>In this example, both “apple” and “avocado” map to the same slot. So you start a linked list at that slot. If you need to
         know the price of bananas, it’s still quick. If you need to know the price of apples, it’s a little slower. You have to search
         through this linked list to find “apple”. If the linked list is small, no big deal—you have to search through three or four
         elements. But suppose you work at a grocery store where you only sell produce that starts with the letter <i class="calibre6">A</i>.
      </p>
      
      <p class="center1"><img src="Images/088fig01_alt.jpg" alt="" class="calibre2" width="590" height="173"/></p>
      
      <p class="noind">Hey, wait a minute! The entire hash table is totally empty except for one slot. And that slot has a giant linked list! Every
         single element in this hash table is in the linked list. That’s as bad as putting everything in a linked list to begin with.
         It’s going to slow down your hash table.
      </p>
      
      <p class="noind">There are two lessons here:</p>
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19"><b class="calibre20"><i class="calibre6">Your hash function is really important.</i> </b>Your hash function mapped all the keys to a single slot. Ideally, your hash function would map keys evenly all over the hash.
            
         </li>
         
         <li class="calibre19">If those linked lists get long, it slows down your hash table a lot. But they won’t get long if you <i class="calibre6">use a good hash function</i>!
            
         </li>
         
      </ul>
      
      <p class="noind">Hash functions are important. A good hash function will give you very few collisions. So how do you pick a good hash function?
         That’s coming up in the next section!
      </p>
      
      
      
      <h3 id="ch05lev1sec5" class="calibre13"><a id="ch05lev1sec5__title" class="calibre3"/>Performance
      </h3>
      
      <p class="noind">You started this chapter at the grocery store. You wanted to build something that would give you the prices for produce <i class="calibre6">instantly</i>. Well, hash tables are really fast.
      </p>
      
      
      
      <p class="center1"><img src="Images/088fig02.jpg" alt="" class="calibre2" width="220" height="211"/></p>
      
      
      <p class="noind">In the average case, hash tables take O(1) for everything. O(1) is called <i class="calibre6">constant time</i>. You haven’t seen constant time before. It doesn’t mean <a id="iddle1244" class="calibre4"/>instant. It means the time taken will stay the same, regardless of how big the hash table is. For example, you know that simple
         search takes linear time.
      </p>
      
      
      
      <p class="center1"><img src="Images/089fig01.jpg" alt="" class="calibre2" width="135" height="196"/></p>
      
      
      <p class="noind">Binary search is faster—it takes log time:</p>
      
      
      
      <p class="center1"><img src="Images/089fig02.jpg" alt="" class="calibre2" width="143" height="190"/></p>
      
      
      <p class="noind">Looking something up in a hash table takes constant time.</p>
      
      
      
      <p class="center1"><img src="Images/089fig03.jpg" alt="" class="calibre2" width="141" height="197"/></p>
      
      
      <p class="noind">See how it’s a flat line? That means it doesn’t matter whether your hash table has 1 element or 1 billion elements—getting
         something out of a hash table will take the same amount of time. Actually, you’ve seen constant time before. Getting an item
         out of an array takes constant time. It doesn’t matter how big your array is; it takes the same amount of time to get an element.
         In the average case, hash tables are really fast.
      </p>
      
      <p class="noind"><a id="iddle1101" class="calibre4"/><a id="iddle1206" class="calibre4"/><a id="iddle1207" class="calibre4"/>In the worst case, a hash table takes O(<i class="calibre6">n</i>)—linear time—for everything, which is really slow. Let’s compare hash tables to arrays and lists.
      </p>
      
      
      
      <p class="center1"><img src="Images/090fig01.jpg" alt="" class="calibre2" width="308" height="221"/></p>
      
      
      <p class="noind">Look at the average case for hash tables. Hash tables are as fast as arrays at searching (getting a value at an index). And
         they’re as fast as linked lists at inserts and deletes. It’s the best of both worlds! But in the worst case, hash tables are
         slow at all of those. So it’s important that you don’t hit worst-case performance with hash tables. And to do that, you need
         to avoid collisions. To avoid collisions, you need
      </p>
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19">A low load factor
            
         </li>
         
         <li class="calibre19">A good hash function
            
         </li>
         
      </ul>
      
      <table width="100%" border="1" cellspacing="5" class="calibre7">
         <colgroup class="calibre23">
            <col width="550" class="calibre9"/>
         </colgroup>
         <tbody class="calibre10">
            <tr class="calibre11">
               <td class="calibre24"/>
            </tr>
         </tbody>
      </table>
      <h5 id="ch05note01" class="notetitle">Note</h5>
      
      
      <p class="noindclose">Before you start this next section, know that this isn’t required reading. I’m going to talk about how to implement a hash
         table, but you’ll never have to do that yourself. Whatever programming language you use will have an implementation of hash
         tables built in. You can use the built-in hash table and assume it will have good performance. The next section gives you
         a peek under the hood.
      </p>
      
      <table width="100%" border="1" cellspacing="5" class="calibre7">
         <colgroup class="calibre23">
            <col width="550" class="calibre9"/>
         </colgroup>
         <tbody class="calibre10">
            <tr class="calibre11">
               <td class="calibre24"/>
            </tr>
         </tbody>
      </table>
      
      
      <h4 id="ch05lev2sec5" class="calibre22"><a id="ch05lev2sec5__title" class="calibre4"/>Load factor
      </h4>
      
      <p class="noind">The load factor of a hash table is easy to calculate.</p>
      
      
      
      <p class="center1"><img src="Images/090fig02.jpg" alt="" class="calibre2" width="205" height="126"/></p>
      
      
      <p class="noind">Hash tables use an array for storage, so you count the number of occupied slots in an array. For example, this hash table
         has a load factor of ⅖, or 0.4.
      </p>
      
      
      
      <p class="center1"><img src="Images/090fig03.jpg" alt="" class="calibre2" width="192" height="122"/></p>
      
      
      <p class="noind"><a id="iddle1303" class="calibre4"/>What’s the load factor of this hash table?
      </p>
      
      
      
      <p class="center1"><img src="Images/091fig01.jpg" alt="" class="calibre2" width="132" height="80"/></p>
      
      
      <p class="noind">If you said ⅓, you’re right. Load factor measures how many empty slots remain in your hash table.</p>
      
      <p class="noind">Suppose you need to store the price of 100 produce items in your hash table, and your hash table has 100 slots. In the best
         case, each item will get its own slot.
      </p>
      
      
      
      <p class="center1"><img src="Images/091fig02.jpg" alt="" class="calibre2" width="305" height="163"/></p>
      
      
      <p class="noind">This hash table has a load factor of 1. What if your hash table has only 50 slots? Then it has a load factor of 2. There’s
         no way each item will get its own slot, because there aren’t enough slots! Having a load factor greater than 1 means you have
         more items than slots in your array. Once the load factor starts to grow, you need to add more slots to your hash table. This
         is called <i class="calibre6">resizing</i>. For example, suppose you have this hash table that is getting pretty full.
      </p>
      
      
      
      <p class="center1"><img src="Images/091fig04.jpg" alt="" class="calibre2" width="196" height="122"/></p>
      
      
      <p class="noind">You need to resize this hash table. First you create a new array that’s bigger. The rule of thumb is to make an array that
         is twice the size.
      </p>
      
      
      
      <p class="center1"><img src="Images/091fig03.jpg" alt="" class="calibre2" width="322" height="53"/></p>
      
      
      <p class="noind"><a id="iddle1331" class="calibre4"/>Now you need to re-insert all of those items into this new hash table using the <kbd class="calibre21">hash</kbd> function:
      </p>
      
      
      
      <p class="center1"><img src="Images/092fig01.jpg" alt="" class="calibre2" width="331" height="83"/></p>
      
      
      <p class="noind">This new table has a load factor of ⅜. Much better! With a lower load factor, you’ll have fewer collisions, and your table
         will perform better. A good rule of thumb is, resize when your load factor is greater than 0.7.
      </p>
      
      <p class="noind">You might be thinking, “This resizing business takes a lot of time!” And you’re right. Resizing is expensive, and you don’t
         want to resize too often. But averaged out, hash tables take O(1) even with resizing.
      </p>
      
      
      
      <h4 id="ch05lev2sec6" class="calibre22"><a id="ch05lev2sec6__title" class="calibre4"/>A good hash function
      </h4>
      
      <p class="noind">A good hash function distributes values in the array evenly.</p>
      
      
      
      <p class="center1"><img src="Images/092fig02.jpg" alt="" class="calibre2" width="322" height="60"/></p>
      
      
      <p class="noind">A bad hash function groups values together and produces a lot of collisions.</p>
      
      
      
      <p class="center1"><img src="Images/092fig03.jpg" alt="" class="calibre2" width="324" height="247"/></p>
      
      
      <p class="noind">What is a good hash function? That’s something you’ll never have to worry about—old men (and women) with big beards sit in
         dark rooms and worry about that. If you’re really curious, look up the SHA function (there’s a short description of it in
         the last chapter). You could use that as your hash function.
      </p>
      
      
      
      
      
      <h3 id="ch05lev1sec6" class="calibre13"><a id="ch05lev1sec6__title" class="calibre3"/>Exercises
      </h3>
      
      <p class="noind"><a id="iddle1205" class="calibre4"/>It’s important for hash functions to have a good distribution. They should map items as broadly as possible. The worst case
         is a hash function that maps all items to the same slot in the hash table.
      </p>
      
      <p class="noind">Suppose you have these four hash functions that work with strings:</p>
      
      <p class="calibre17"/>
      <ol class="calibre27">
         
         <li class="calibre19">Return “1” for all input.
            
         </li>
         
         <li class="calibre19">Use the length of the string as the index.
            
         </li>
         
         <li class="calibre19">Use the first character of the string as the index. So, all strings starting with <i class="calibre6">a</i> are hashed together, and so on.
            
         </li>
         
         <li class="calibre19">Map every letter to a prime number: a = 2, b = 3, c = 5, d = 7, e = 11, and so on. For a string, the hash function is the
            sum of all the characters modulo the size of the hash. For example, if your hash size is 10, and the string is “bag”, the
            index is 3 + 2 + 17 % 10 = 22 % 10 = 2.
            
         </li>
         
      </ol>
      
      <p class="noind">For each of these examples, which hash functions would provide a good distribution? Assume a hash table size of 10 slots.</p>
      
      <p class="calibre17"><a id="ch05qa2" class="calibre4"/></p>
      <blockquote class="calibre15">
         <p class="calibre17"><a id="ch05qa2qe1" class="calibre4"/></p>
         <p class="calibre17"><a id="ch05qa2q1" class="calibre4"/><b class="calibre20">5.5 </b></p><p class="noind">A phonebook where the keys are names and values are phone numbers. The names are as follows: Esther, Ben, Bob, and Dan.</p>
            
         <p class="calibre17"/>
      </blockquote>
      <blockquote class="calibre15">
         <p class="calibre17"><a id="ch05qa2qe2" class="calibre4"/></p>
         <p class="calibre17"><a id="ch05qa2q2" class="calibre4"/><b class="calibre20">5.6 </b></p><p class="noind">A mapping from battery size to power. The sizes are A, AA, AAA, and AAAA.</p>
            
         <p class="calibre17"/>
      </blockquote>
      <blockquote class="calibre15">
         <p class="calibre17"><a id="ch05qa2qe3" class="calibre4"/></p>
         <p class="calibre17"><a id="ch05qa2q3" class="calibre4"/><b class="calibre20">5.7 </b></p><p class="noind">A mapping from book titles to authors. The titles are <i class="calibre6">Maus</i>, <i class="calibre6">Fun Home</i>, and <i class="calibre6">Watchmen</i>.
            </p>
            
         <p class="calibre17"/>
      </blockquote>
      
      
      
      <h3 id="ch05lev1sec7" class="calibre13"><a id="ch05lev1sec7__title" class="calibre3"/>Recap
      </h3>
      
      <p class="noind">You’ll almost never have to implement a hash table yourself. The programming language you use should provide an implementation
         for you. You can use Python’s hash tables and assume that you’ll get the average case performance: constant time.
      </p>
      
      <p class="noind">Hash tables are a powerful data structure because they’re so fast and they let you model data in a different way. You might
         soon find that you’re using them all the time:
      </p>
      
      <p class="calibre17"/>
      <ul class="calibre18">
         
         <li class="calibre19">You can make a hash table by combining a hash function with an array.
            
         </li>
         
         <li class="calibre19">Collisions are bad. You need a hash function that minimizes collisions.
            
         </li>
         
         <li class="calibre19">Hash tables have really fast search, insert, and delete.
            
         </li>
         
         <li class="calibre19">Hash tables are good for modeling relationships from one item to another item.
            
         </li>
         
         <li class="calibre19">Once your load factor is greater than .07, it’s time to resize your hash table.
            
         </li>
         
         <li class="calibre19">Hash tables are used for caching data (for example, with a web server).
            
         </li>
         
         <li class="calibre19">Hash tables are great for catching duplicates.
            
         </li>
         
      </ul>
      
      
      
      <p class="center1"><img src="Images/094fig01.jpg" alt="" class="calibre2" width="500" height="313"/></p>
      
      
      
      
      
      <div class="calibre16" id="calibre_pb_18"/>
</div>



  </body>
</html>